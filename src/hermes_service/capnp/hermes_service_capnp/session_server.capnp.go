// Code generated by capnpc-go. DO NOT EDIT.

package hermes_service_capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type SessionServer capnp.Client

// SessionServer_TypeID is the unique identifier for the type SessionServer.
const SessionServer_TypeID = 0xa064f017cda4f80a

func (c SessionServer) NewSession(ctx context.Context, params func(SessionServer_newSession_Params) error) (SessionServer_newSession_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa064f017cda4f80a,
			MethodID:      0,
			InterfaceName: "session_server.capnp:SessionServer",
			MethodName:    "newSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionServer_newSession_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionServer_newSession_Results_Future{Future: ans.Future()}, release

}

func (c SessionServer) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c SessionServer) String() string {
	return "SessionServer(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c SessionServer) AddRef() SessionServer {
	return SessionServer(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c SessionServer) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c SessionServer) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c SessionServer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (SessionServer) DecodeFromPtr(p capnp.Ptr) SessionServer {
	return SessionServer(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c SessionServer) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c SessionServer) IsSame(other SessionServer) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c SessionServer) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c SessionServer) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A SessionServer_Server is a SessionServer with a local implementation.
type SessionServer_Server interface {
	NewSession(context.Context, SessionServer_newSession) error
}

// SessionServer_NewServer creates a new Server from an implementation of SessionServer_Server.
func SessionServer_NewServer(s SessionServer_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SessionServer_Methods(nil, s), s, c)
}

// SessionServer_ServerToClient creates a new Client from an implementation of SessionServer_Server.
// The caller is responsible for calling Release on the returned Client.
func SessionServer_ServerToClient(s SessionServer_Server) SessionServer {
	return SessionServer(capnp.NewClient(SessionServer_NewServer(s)))
}

// SessionServer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SessionServer_Methods(methods []server.Method, s SessionServer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa064f017cda4f80a,
			MethodID:      0,
			InterfaceName: "session_server.capnp:SessionServer",
			MethodName:    "newSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewSession(ctx, SessionServer_newSession{call})
		},
	})

	return methods
}

// SessionServer_newSession holds the state for a server call to SessionServer.newSession.
// See server.Call for documentation.
type SessionServer_newSession struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionServer_newSession) Args() SessionServer_newSession_Params {
	return SessionServer_newSession_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionServer_newSession) AllocResults() (SessionServer_newSession_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionServer_newSession_Results(r), err
}

// SessionServer_List is a list of SessionServer.
type SessionServer_List = capnp.CapList[SessionServer]

// NewSessionServer_List creates a new list of SessionServer.
func NewSessionServer_List(s *capnp.Segment, sz int32) (SessionServer_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[SessionServer](l), err
}

type SessionServer_newSession_Params capnp.Struct

// SessionServer_newSession_Params_TypeID is the unique identifier for the type SessionServer_newSession_Params.
const SessionServer_newSession_Params_TypeID = 0xa548460511093a50

func NewSessionServer_newSession_Params(s *capnp.Segment) (SessionServer_newSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionServer_newSession_Params(st), err
}

func NewRootSessionServer_newSession_Params(s *capnp.Segment) (SessionServer_newSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionServer_newSession_Params(st), err
}

func ReadRootSessionServer_newSession_Params(msg *capnp.Message) (SessionServer_newSession_Params, error) {
	root, err := msg.Root()
	return SessionServer_newSession_Params(root.Struct()), err
}

func (s SessionServer_newSession_Params) String() string {
	str, _ := text.Marshal(0xa548460511093a50, capnp.Struct(s))
	return str
}

func (s SessionServer_newSession_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionServer_newSession_Params) DecodeFromPtr(p capnp.Ptr) SessionServer_newSession_Params {
	return SessionServer_newSession_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionServer_newSession_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionServer_newSession_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionServer_newSession_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionServer_newSession_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionServer_newSession_Params) Workdir() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SessionServer_newSession_Params) HasWorkdir() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionServer_newSession_Params) WorkdirBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SessionServer_newSession_Params) SetWorkdir(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SessionServer_newSession_Params) ResultCallback() Callback {
	p, _ := capnp.Struct(s).Ptr(1)
	return Callback(p.Interface().Client())
}

func (s SessionServer_newSession_Params) HasResultCallback() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionServer_newSession_Params) SetResultCallback(v Callback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// SessionServer_newSession_Params_List is a list of SessionServer_newSession_Params.
type SessionServer_newSession_Params_List = capnp.StructList[SessionServer_newSession_Params]

// NewSessionServer_newSession_Params creates a new list of SessionServer_newSession_Params.
func NewSessionServer_newSession_Params_List(s *capnp.Segment, sz int32) (SessionServer_newSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SessionServer_newSession_Params](l), err
}

// SessionServer_newSession_Params_Future is a wrapper for a SessionServer_newSession_Params promised by a client call.
type SessionServer_newSession_Params_Future struct{ *capnp.Future }

func (f SessionServer_newSession_Params_Future) Struct() (SessionServer_newSession_Params, error) {
	p, err := f.Future.Ptr()
	return SessionServer_newSession_Params(p.Struct()), err
}
func (p SessionServer_newSession_Params_Future) ResultCallback() Callback {
	return Callback(p.Future.Field(1, nil).Client())
}

type SessionServer_newSession_Results capnp.Struct

// SessionServer_newSession_Results_TypeID is the unique identifier for the type SessionServer_newSession_Results.
const SessionServer_newSession_Results_TypeID = 0xd1cd609cb22c8778

func NewSessionServer_newSession_Results(s *capnp.Segment) (SessionServer_newSession_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionServer_newSession_Results(st), err
}

func NewRootSessionServer_newSession_Results(s *capnp.Segment) (SessionServer_newSession_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionServer_newSession_Results(st), err
}

func ReadRootSessionServer_newSession_Results(msg *capnp.Message) (SessionServer_newSession_Results, error) {
	root, err := msg.Root()
	return SessionServer_newSession_Results(root.Struct()), err
}

func (s SessionServer_newSession_Results) String() string {
	str, _ := text.Marshal(0xd1cd609cb22c8778, capnp.Struct(s))
	return str
}

func (s SessionServer_newSession_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionServer_newSession_Results) DecodeFromPtr(p capnp.Ptr) SessionServer_newSession_Results {
	return SessionServer_newSession_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionServer_newSession_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionServer_newSession_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionServer_newSession_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionServer_newSession_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionServer_newSession_Results) Session() Session {
	p, _ := capnp.Struct(s).Ptr(0)
	return Session(p.Interface().Client())
}

func (s SessionServer_newSession_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionServer_newSession_Results) SetSession(v Session) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SessionServer_newSession_Results_List is a list of SessionServer_newSession_Results.
type SessionServer_newSession_Results_List = capnp.StructList[SessionServer_newSession_Results]

// NewSessionServer_newSession_Results creates a new list of SessionServer_newSession_Results.
func NewSessionServer_newSession_Results_List(s *capnp.Segment, sz int32) (SessionServer_newSession_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SessionServer_newSession_Results](l), err
}

// SessionServer_newSession_Results_Future is a wrapper for a SessionServer_newSession_Results promised by a client call.
type SessionServer_newSession_Results_Future struct{ *capnp.Future }

func (f SessionServer_newSession_Results_Future) Struct() (SessionServer_newSession_Results, error) {
	p, err := f.Future.Ptr()
	return SessionServer_newSession_Results(p.Struct()), err
}
func (p SessionServer_newSession_Results_Future) Session() Session {
	return Session(p.Future.Field(0, nil).Client())
}

type Session capnp.Client

// Session_TypeID is the unique identifier for the type Session.
const Session_TypeID = 0x991dedbdd762c2c4

func (c Session) Send(ctx context.Context, params func(Session_send_Params) error) (Session_send_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x991dedbdd762c2c4,
			MethodID:      0,
			InterfaceName: "session_server.capnp:Session",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Session_send_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Session_send_Results_Future{Future: ans.Future()}, release

}

func (c Session) Close(ctx context.Context, params func(Session_close_Params) error) (Session_close_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x991dedbdd762c2c4,
			MethodID:      1,
			InterfaceName: "session_server.capnp:Session",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Session_close_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Session_close_Results_Future{Future: ans.Future()}, release

}

func (c Session) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Session) String() string {
	return "Session(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Session) AddRef() Session {
	return Session(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Session) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Session) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Session) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Session) DecodeFromPtr(p capnp.Ptr) Session {
	return Session(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Session) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Session) IsSame(other Session) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Session) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Session) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Session_Server is a Session with a local implementation.
type Session_Server interface {
	Send(context.Context, Session_send) error

	Close(context.Context, Session_close) error
}

// Session_NewServer creates a new Server from an implementation of Session_Server.
func Session_NewServer(s Session_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Session_Methods(nil, s), s, c)
}

// Session_ServerToClient creates a new Client from an implementation of Session_Server.
// The caller is responsible for calling Release on the returned Client.
func Session_ServerToClient(s Session_Server) Session {
	return Session(capnp.NewClient(Session_NewServer(s)))
}

// Session_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Session_Methods(methods []server.Method, s Session_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x991dedbdd762c2c4,
			MethodID:      0,
			InterfaceName: "session_server.capnp:Session",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, Session_send{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x991dedbdd762c2c4,
			MethodID:      1,
			InterfaceName: "session_server.capnp:Session",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Session_close{call})
		},
	})

	return methods
}

// Session_send holds the state for a server call to Session.send.
// See server.Call for documentation.
type Session_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Session_send) Args() Session_send_Params {
	return Session_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Session_send) AllocResults() (Session_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_send_Results(r), err
}

// Session_close holds the state for a server call to Session.close.
// See server.Call for documentation.
type Session_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Session_close) Args() Session_close_Params {
	return Session_close_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Session_close) AllocResults() (Session_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Results(r), err
}

// Session_List is a list of Session.
type Session_List = capnp.CapList[Session]

// NewSession_List creates a new list of Session.
func NewSession_List(s *capnp.Segment, sz int32) (Session_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Session](l), err
}

type Session_send_Params capnp.Struct

// Session_send_Params_TypeID is the unique identifier for the type Session_send_Params.
const Session_send_Params_TypeID = 0xd73b4c8dfa07fc7f

func NewSession_send_Params(s *capnp.Segment) (Session_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Session_send_Params(st), err
}

func NewRootSession_send_Params(s *capnp.Segment) (Session_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Session_send_Params(st), err
}

func ReadRootSession_send_Params(msg *capnp.Message) (Session_send_Params, error) {
	root, err := msg.Root()
	return Session_send_Params(root.Struct()), err
}

func (s Session_send_Params) String() string {
	str, _ := text.Marshal(0xd73b4c8dfa07fc7f, capnp.Struct(s))
	return str
}

func (s Session_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_send_Params) DecodeFromPtr(p capnp.Ptr) Session_send_Params {
	return Session_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session_send_Params) RunId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Session_send_Params) HasRunId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Session_send_Params) RunIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Session_send_Params) SetRunId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Session_send_Params) Params() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Session_send_Params) HasParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Session_send_Params) SetParams(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewParams sets the params field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Session_send_Params) NewParams(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Session_send_Params_List is a list of Session_send_Params.
type Session_send_Params_List = capnp.StructList[Session_send_Params]

// NewSession_send_Params creates a new list of Session_send_Params.
func NewSession_send_Params_List(s *capnp.Segment, sz int32) (Session_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Session_send_Params](l), err
}

// Session_send_Params_Future is a wrapper for a Session_send_Params promised by a client call.
type Session_send_Params_Future struct{ *capnp.Future }

func (f Session_send_Params_Future) Struct() (Session_send_Params, error) {
	p, err := f.Future.Ptr()
	return Session_send_Params(p.Struct()), err
}

type Session_send_Results capnp.Struct

// Session_send_Results_TypeID is the unique identifier for the type Session_send_Results.
const Session_send_Results_TypeID = 0xb0db66a28c40394c

func NewSession_send_Results(s *capnp.Segment) (Session_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_send_Results(st), err
}

func NewRootSession_send_Results(s *capnp.Segment) (Session_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_send_Results(st), err
}

func ReadRootSession_send_Results(msg *capnp.Message) (Session_send_Results, error) {
	root, err := msg.Root()
	return Session_send_Results(root.Struct()), err
}

func (s Session_send_Results) String() string {
	str, _ := text.Marshal(0xb0db66a28c40394c, capnp.Struct(s))
	return str
}

func (s Session_send_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_send_Results) DecodeFromPtr(p capnp.Ptr) Session_send_Results {
	return Session_send_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_send_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_send_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_send_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_send_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Session_send_Results_List is a list of Session_send_Results.
type Session_send_Results_List = capnp.StructList[Session_send_Results]

// NewSession_send_Results creates a new list of Session_send_Results.
func NewSession_send_Results_List(s *capnp.Segment, sz int32) (Session_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Session_send_Results](l), err
}

// Session_send_Results_Future is a wrapper for a Session_send_Results promised by a client call.
type Session_send_Results_Future struct{ *capnp.Future }

func (f Session_send_Results_Future) Struct() (Session_send_Results, error) {
	p, err := f.Future.Ptr()
	return Session_send_Results(p.Struct()), err
}

type Session_close_Params capnp.Struct

// Session_close_Params_TypeID is the unique identifier for the type Session_close_Params.
const Session_close_Params_TypeID = 0xa4409943248dfd5c

func NewSession_close_Params(s *capnp.Segment) (Session_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Params(st), err
}

func NewRootSession_close_Params(s *capnp.Segment) (Session_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Params(st), err
}

func ReadRootSession_close_Params(msg *capnp.Message) (Session_close_Params, error) {
	root, err := msg.Root()
	return Session_close_Params(root.Struct()), err
}

func (s Session_close_Params) String() string {
	str, _ := text.Marshal(0xa4409943248dfd5c, capnp.Struct(s))
	return str
}

func (s Session_close_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_close_Params) DecodeFromPtr(p capnp.Ptr) Session_close_Params {
	return Session_close_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_close_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_close_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_close_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_close_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Session_close_Params_List is a list of Session_close_Params.
type Session_close_Params_List = capnp.StructList[Session_close_Params]

// NewSession_close_Params creates a new list of Session_close_Params.
func NewSession_close_Params_List(s *capnp.Segment, sz int32) (Session_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Session_close_Params](l), err
}

// Session_close_Params_Future is a wrapper for a Session_close_Params promised by a client call.
type Session_close_Params_Future struct{ *capnp.Future }

func (f Session_close_Params_Future) Struct() (Session_close_Params, error) {
	p, err := f.Future.Ptr()
	return Session_close_Params(p.Struct()), err
}

type Session_close_Results capnp.Struct

// Session_close_Results_TypeID is the unique identifier for the type Session_close_Results.
const Session_close_Results_TypeID = 0xc081b3907385e196

func NewSession_close_Results(s *capnp.Segment) (Session_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Results(st), err
}

func NewRootSession_close_Results(s *capnp.Segment) (Session_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Results(st), err
}

func ReadRootSession_close_Results(msg *capnp.Message) (Session_close_Results, error) {
	root, err := msg.Root()
	return Session_close_Results(root.Struct()), err
}

func (s Session_close_Results) String() string {
	str, _ := text.Marshal(0xc081b3907385e196, capnp.Struct(s))
	return str
}

func (s Session_close_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_close_Results) DecodeFromPtr(p capnp.Ptr) Session_close_Results {
	return Session_close_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_close_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_close_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_close_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_close_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Session_close_Results_List is a list of Session_close_Results.
type Session_close_Results_List = capnp.StructList[Session_close_Results]

// NewSession_close_Results creates a new list of Session_close_Results.
func NewSession_close_Results_List(s *capnp.Segment, sz int32) (Session_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Session_close_Results](l), err
}

// Session_close_Results_Future is a wrapper for a Session_close_Results promised by a client call.
type Session_close_Results_Future struct{ *capnp.Future }

func (f Session_close_Results_Future) Struct() (Session_close_Results, error) {
	p, err := f.Future.Ptr()
	return Session_close_Results(p.Struct()), err
}

type Callback capnp.Client

// Callback_TypeID is the unique identifier for the type Callback.
const Callback_TypeID = 0x8f7ad1d41e816a04

func (c Callback) SendData(ctx context.Context, params func(Callback_sendData_Params) error) (Callback_sendData_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      0,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "sendData",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Callback_sendData_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Callback_sendData_Results_Future{Future: ans.Future()}, release

}

func (c Callback) Done(ctx context.Context, params func(Callback_done_Params) error) (Callback_done_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      1,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Callback_done_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Callback_done_Results_Future{Future: ans.Future()}, release

}

func (c Callback) SendError(ctx context.Context, params func(Callback_sendError_Params) error) (Callback_sendError_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      2,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "sendError",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Callback_sendError_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Callback_sendError_Results_Future{Future: ans.Future()}, release

}

func (c Callback) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Callback) String() string {
	return "Callback(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Callback) AddRef() Callback {
	return Callback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Callback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Callback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Callback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Callback) DecodeFromPtr(p capnp.Ptr) Callback {
	return Callback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Callback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Callback) IsSame(other Callback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Callback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Callback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Callback_Server is a Callback with a local implementation.
type Callback_Server interface {
	SendData(context.Context, Callback_sendData) error

	Done(context.Context, Callback_done) error

	SendError(context.Context, Callback_sendError) error
}

// Callback_NewServer creates a new Server from an implementation of Callback_Server.
func Callback_NewServer(s Callback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Callback_Methods(nil, s), s, c)
}

// Callback_ServerToClient creates a new Client from an implementation of Callback_Server.
// The caller is responsible for calling Release on the returned Client.
func Callback_ServerToClient(s Callback_Server) Callback {
	return Callback(capnp.NewClient(Callback_NewServer(s)))
}

// Callback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Callback_Methods(methods []server.Method, s Callback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      0,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "sendData",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendData(ctx, Callback_sendData{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      1,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, Callback_done{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      2,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "sendError",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendError(ctx, Callback_sendError{call})
		},
	})

	return methods
}

// Callback_sendData holds the state for a server call to Callback.sendData.
// See server.Call for documentation.
type Callback_sendData struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Callback_sendData) Args() Callback_sendData_Params {
	return Callback_sendData_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Callback_sendData) AllocResults() (Callback_sendData_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendData_Results(r), err
}

// Callback_done holds the state for a server call to Callback.done.
// See server.Call for documentation.
type Callback_done struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Callback_done) Args() Callback_done_Params {
	return Callback_done_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Callback_done) AllocResults() (Callback_done_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_done_Results(r), err
}

// Callback_sendError holds the state for a server call to Callback.sendError.
// See server.Call for documentation.
type Callback_sendError struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Callback_sendError) Args() Callback_sendError_Params {
	return Callback_sendError_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Callback_sendError) AllocResults() (Callback_sendError_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendError_Results(r), err
}

// Callback_List is a list of Callback.
type Callback_List = capnp.CapList[Callback]

// NewCallback_List creates a new list of Callback.
func NewCallback_List(s *capnp.Segment, sz int32) (Callback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Callback](l), err
}

type Callback_sendData_Params capnp.Struct

// Callback_sendData_Params_TypeID is the unique identifier for the type Callback_sendData_Params.
const Callback_sendData_Params_TypeID = 0xab248615ff957386

func NewCallback_sendData_Params(s *capnp.Segment) (Callback_sendData_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Callback_sendData_Params(st), err
}

func NewRootCallback_sendData_Params(s *capnp.Segment) (Callback_sendData_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Callback_sendData_Params(st), err
}

func ReadRootCallback_sendData_Params(msg *capnp.Message) (Callback_sendData_Params, error) {
	root, err := msg.Root()
	return Callback_sendData_Params(root.Struct()), err
}

func (s Callback_sendData_Params) String() string {
	str, _ := text.Marshal(0xab248615ff957386, capnp.Struct(s))
	return str
}

func (s Callback_sendData_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_sendData_Params) DecodeFromPtr(p capnp.Ptr) Callback_sendData_Params {
	return Callback_sendData_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_sendData_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_sendData_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_sendData_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_sendData_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Callback_sendData_Params) RunId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Callback_sendData_Params) HasRunId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Callback_sendData_Params) RunIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Callback_sendData_Params) SetRunId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Callback_sendData_Params) OutData() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Callback_sendData_Params) HasOutData() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Callback_sendData_Params) OutDataBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Callback_sendData_Params) SetOutData(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Callback_sendData_Params_List is a list of Callback_sendData_Params.
type Callback_sendData_Params_List = capnp.StructList[Callback_sendData_Params]

// NewCallback_sendData_Params creates a new list of Callback_sendData_Params.
func NewCallback_sendData_Params_List(s *capnp.Segment, sz int32) (Callback_sendData_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Callback_sendData_Params](l), err
}

// Callback_sendData_Params_Future is a wrapper for a Callback_sendData_Params promised by a client call.
type Callback_sendData_Params_Future struct{ *capnp.Future }

func (f Callback_sendData_Params_Future) Struct() (Callback_sendData_Params, error) {
	p, err := f.Future.Ptr()
	return Callback_sendData_Params(p.Struct()), err
}

type Callback_sendData_Results capnp.Struct

// Callback_sendData_Results_TypeID is the unique identifier for the type Callback_sendData_Results.
const Callback_sendData_Results_TypeID = 0xc83cd0cad7e27568

func NewCallback_sendData_Results(s *capnp.Segment) (Callback_sendData_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendData_Results(st), err
}

func NewRootCallback_sendData_Results(s *capnp.Segment) (Callback_sendData_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendData_Results(st), err
}

func ReadRootCallback_sendData_Results(msg *capnp.Message) (Callback_sendData_Results, error) {
	root, err := msg.Root()
	return Callback_sendData_Results(root.Struct()), err
}

func (s Callback_sendData_Results) String() string {
	str, _ := text.Marshal(0xc83cd0cad7e27568, capnp.Struct(s))
	return str
}

func (s Callback_sendData_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_sendData_Results) DecodeFromPtr(p capnp.Ptr) Callback_sendData_Results {
	return Callback_sendData_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_sendData_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_sendData_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_sendData_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_sendData_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Callback_sendData_Results_List is a list of Callback_sendData_Results.
type Callback_sendData_Results_List = capnp.StructList[Callback_sendData_Results]

// NewCallback_sendData_Results creates a new list of Callback_sendData_Results.
func NewCallback_sendData_Results_List(s *capnp.Segment, sz int32) (Callback_sendData_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Callback_sendData_Results](l), err
}

// Callback_sendData_Results_Future is a wrapper for a Callback_sendData_Results promised by a client call.
type Callback_sendData_Results_Future struct{ *capnp.Future }

func (f Callback_sendData_Results_Future) Struct() (Callback_sendData_Results, error) {
	p, err := f.Future.Ptr()
	return Callback_sendData_Results(p.Struct()), err
}

type Callback_done_Params capnp.Struct

// Callback_done_Params_TypeID is the unique identifier for the type Callback_done_Params.
const Callback_done_Params_TypeID = 0xe970781fd54f568e

func NewCallback_done_Params(s *capnp.Segment) (Callback_done_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Callback_done_Params(st), err
}

func NewRootCallback_done_Params(s *capnp.Segment) (Callback_done_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Callback_done_Params(st), err
}

func ReadRootCallback_done_Params(msg *capnp.Message) (Callback_done_Params, error) {
	root, err := msg.Root()
	return Callback_done_Params(root.Struct()), err
}

func (s Callback_done_Params) String() string {
	str, _ := text.Marshal(0xe970781fd54f568e, capnp.Struct(s))
	return str
}

func (s Callback_done_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_done_Params) DecodeFromPtr(p capnp.Ptr) Callback_done_Params {
	return Callback_done_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_done_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_done_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_done_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_done_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Callback_done_Params) RunId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Callback_done_Params) HasRunId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Callback_done_Params) RunIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Callback_done_Params) SetRunId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Callback_done_Params_List is a list of Callback_done_Params.
type Callback_done_Params_List = capnp.StructList[Callback_done_Params]

// NewCallback_done_Params creates a new list of Callback_done_Params.
func NewCallback_done_Params_List(s *capnp.Segment, sz int32) (Callback_done_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Callback_done_Params](l), err
}

// Callback_done_Params_Future is a wrapper for a Callback_done_Params promised by a client call.
type Callback_done_Params_Future struct{ *capnp.Future }

func (f Callback_done_Params_Future) Struct() (Callback_done_Params, error) {
	p, err := f.Future.Ptr()
	return Callback_done_Params(p.Struct()), err
}

type Callback_done_Results capnp.Struct

// Callback_done_Results_TypeID is the unique identifier for the type Callback_done_Results.
const Callback_done_Results_TypeID = 0xbc40e8a99586a665

func NewCallback_done_Results(s *capnp.Segment) (Callback_done_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_done_Results(st), err
}

func NewRootCallback_done_Results(s *capnp.Segment) (Callback_done_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_done_Results(st), err
}

func ReadRootCallback_done_Results(msg *capnp.Message) (Callback_done_Results, error) {
	root, err := msg.Root()
	return Callback_done_Results(root.Struct()), err
}

func (s Callback_done_Results) String() string {
	str, _ := text.Marshal(0xbc40e8a99586a665, capnp.Struct(s))
	return str
}

func (s Callback_done_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_done_Results) DecodeFromPtr(p capnp.Ptr) Callback_done_Results {
	return Callback_done_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_done_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_done_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_done_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_done_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Callback_done_Results_List is a list of Callback_done_Results.
type Callback_done_Results_List = capnp.StructList[Callback_done_Results]

// NewCallback_done_Results creates a new list of Callback_done_Results.
func NewCallback_done_Results_List(s *capnp.Segment, sz int32) (Callback_done_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Callback_done_Results](l), err
}

// Callback_done_Results_Future is a wrapper for a Callback_done_Results promised by a client call.
type Callback_done_Results_Future struct{ *capnp.Future }

func (f Callback_done_Results_Future) Struct() (Callback_done_Results, error) {
	p, err := f.Future.Ptr()
	return Callback_done_Results(p.Struct()), err
}

type Callback_sendError_Params capnp.Struct

// Callback_sendError_Params_TypeID is the unique identifier for the type Callback_sendError_Params.
const Callback_sendError_Params_TypeID = 0xcdbc9fb380c2572b

func NewCallback_sendError_Params(s *capnp.Segment) (Callback_sendError_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Callback_sendError_Params(st), err
}

func NewRootCallback_sendError_Params(s *capnp.Segment) (Callback_sendError_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Callback_sendError_Params(st), err
}

func ReadRootCallback_sendError_Params(msg *capnp.Message) (Callback_sendError_Params, error) {
	root, err := msg.Root()
	return Callback_sendError_Params(root.Struct()), err
}

func (s Callback_sendError_Params) String() string {
	str, _ := text.Marshal(0xcdbc9fb380c2572b, capnp.Struct(s))
	return str
}

func (s Callback_sendError_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_sendError_Params) DecodeFromPtr(p capnp.Ptr) Callback_sendError_Params {
	return Callback_sendError_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_sendError_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_sendError_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_sendError_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_sendError_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Callback_sendError_Params) RunId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Callback_sendError_Params) HasRunId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Callback_sendError_Params) RunIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Callback_sendError_Params) SetRunId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Callback_sendError_Params) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Callback_sendError_Params) HasError() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Callback_sendError_Params) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Callback_sendError_Params) SetError(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Callback_sendError_Params_List is a list of Callback_sendError_Params.
type Callback_sendError_Params_List = capnp.StructList[Callback_sendError_Params]

// NewCallback_sendError_Params creates a new list of Callback_sendError_Params.
func NewCallback_sendError_Params_List(s *capnp.Segment, sz int32) (Callback_sendError_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Callback_sendError_Params](l), err
}

// Callback_sendError_Params_Future is a wrapper for a Callback_sendError_Params promised by a client call.
type Callback_sendError_Params_Future struct{ *capnp.Future }

func (f Callback_sendError_Params_Future) Struct() (Callback_sendError_Params, error) {
	p, err := f.Future.Ptr()
	return Callback_sendError_Params(p.Struct()), err
}

type Callback_sendError_Results capnp.Struct

// Callback_sendError_Results_TypeID is the unique identifier for the type Callback_sendError_Results.
const Callback_sendError_Results_TypeID = 0xaa964acaea262bc8

func NewCallback_sendError_Results(s *capnp.Segment) (Callback_sendError_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendError_Results(st), err
}

func NewRootCallback_sendError_Results(s *capnp.Segment) (Callback_sendError_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendError_Results(st), err
}

func ReadRootCallback_sendError_Results(msg *capnp.Message) (Callback_sendError_Results, error) {
	root, err := msg.Root()
	return Callback_sendError_Results(root.Struct()), err
}

func (s Callback_sendError_Results) String() string {
	str, _ := text.Marshal(0xaa964acaea262bc8, capnp.Struct(s))
	return str
}

func (s Callback_sendError_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_sendError_Results) DecodeFromPtr(p capnp.Ptr) Callback_sendError_Results {
	return Callback_sendError_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_sendError_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_sendError_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_sendError_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_sendError_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Callback_sendError_Results_List is a list of Callback_sendError_Results.
type Callback_sendError_Results_List = capnp.StructList[Callback_sendError_Results]

// NewCallback_sendError_Results creates a new list of Callback_sendError_Results.
func NewCallback_sendError_Results_List(s *capnp.Segment, sz int32) (Callback_sendError_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Callback_sendError_Results](l), err
}

// Callback_sendError_Results_Future is a wrapper for a Callback_sendError_Results promised by a client call.
type Callback_sendError_Results_Future struct{ *capnp.Future }

func (f Callback_sendError_Results_Future) Struct() (Callback_sendError_Results, error) {
	p, err := f.Future.Ptr()
	return Callback_sendError_Results(p.Struct()), err
}

const schema_c4b468a2826bb79b = "x\xda\x8cU]h\x1cU\x14>g\xee\x9dnZ\x92" +
	".\x97i(\x0a\xe9>\xb8\x15\xb5\xcd\xd2l\x15lT" +
	"v0\xad\xda\x10pf\x0b\x8aE\xd1iv\xa41\x9b" +
	"\x99\xf5\xcenS\xf3\xb2\xb6\xd0\xf4\xc5\x18_\x12\x08*" +
	"JH\x84D\x04I\x14_\"H\x88\x18\x02\x01\x03\x86" +
	"<\x88\x0f\xfad\x02\x01\x11\x02*\x86\x91{gg\xff" +
	"\x92\x8d\xfb\xb6\xdc\xf3\x9d\xef\xe7\x9c\xb3\xbb\x17N+:" +
	"\xedj\x1b?\x06\x8a\xd9\xa7\x1e\xf3\xe9[w\xce\xfc\xb4" +
	"12\x0e\xac\x9d\xf8\x1f~3xw\xfa\xe6W+\x00" +
	"\xa8u\x92?\xb5K$\x02\xa0=A~\xd0\xbe\x16\x9f" +
	"\xfc\x95\xe5\x1b[\xdf\xeevL\x1d\x00\x7fLv\xb49" +
	"\x09\x9e%\xf7\xb5=\x09>\xf1\xd7\xcc\xfa\xe9?2\x9f" +
	"\xd6\x83/\xfeB\x1eDmW\xa2\xb7\xc9\xf3Z;\x15" +
	"\xe8W\xf7\xc7\xe2=S\xfa\x0c\xb0\x0e\x04\x10O\x17\xf7" +
	"I\x1a\x81\xfaF\xf7q\xa6>\xf7\xc2,\xb0\x87\x10@" +
	"UDi\x9b\xcc#\xa0\xf67\x19\x06\xf4W\xcf=\xbc" +
	"\xb3\xd6;9\x0f\xecL\xd8\xfa\x0a\xbd+ZG\xbd\x09" +
	"\xbf}4\xfeyP\x09Z\xafP.ZM*Z\xfb" +
	".\xe9\xefM\xbf\xf9\xf3\x97U\xaa_P\xa9j\x7f6" +
	":1\xf7\xbb\xbeTE:E\xaf\x8b\xca\xe4\xaf\xf7\xbc" +
	"\x0f\x16\xef|W\xd5s/\xa8\xdc,\xfc\xb6\xb5\xf6\xe3" +
	"\xd3\xabU=o\xd3\x11Q9\xf7\xf2\xf2\xbb\x8b\x9f," +
	"\xadW\x1byM\x94P\x1b\x90Fn\xdf?\xbf\xf0\xd1" +
	"\x1b\xeb\x1b\xa5\x90(\x00\xdf\xd3\x05\x01\xd8\xa4)@\xbf" +
	"\xf8o\xe4\x9f\xb1\xbe\xa7\xb6\x02\xd5\x80a\x8f\xf6\x0a\x00" +
	"\xaa\x82\xe1\xfd\x97^\xdc\x8c\xdd\xcem\x97$$\xc3\x90" +
	"\x9a\x16\x80w\xd4\x14t\xfa\x9e\xedy\x03\xae\xf3\xba\xe2" +
	"\xd9\xfc\x96\xcd\x13\xfdV\xce\xc9u\xf7X\xd9X\xf6\x86" +
	"\xd5?h \x9a\xadD\x05(O\x0d\xc3<\xcc\xec\x05" +
	"\x85]\x8d`E\x05\xc3\xf9\xb0g\x1e\x03\x85uEP" +
	")\x87\xc4p!\xecl\x1a\x14\xd6\x11\xf1=\xdb\xc9\\" +
	"\xb6\xf2\x16\x00\xe8\x18\xcd\xb8\x8e\xad\xa3|\xbc\xc2\xb9\x0b" +
	"\xc8u4\x10\x1b\x18\xbcf{Q\xf1,\xfc\xb5H\x7f" +
	"\xe1(0\xdc\x1e\xeb\x12\x1e\xce\x0a\x7f\xe1\x19a\xb8%" +
	"\xf6@\x12\x14\xd6\x16\x89\x0a9\x1dc\xfdY\xd7\xb3k" +
	"\xf5H\xbd\x9ex\xbdf\xf3[\xc4\xe6B\x95J\xd5\xf0" +
	"\x0c1\\\x15c\xd7Aa\xc7#\xbec\x0f\xcb& " +
	"\xaeS\xcbL\x0fcNH\x0bq\xc3\xe2\xd6\x10ze" +
	"\xac\xda\xc8\x85\xcd\x13\xa1\x82\xeb\xc4\x0d+\xca\xad!\xcf" +
	"l!\x14\x80\"\x00{\xf4Y\x003N\xd0\xbc\xa0 " +
	"C<\x85\xe2\xb1s\x04\xc0<O\xd0|R\xc1\xe2\xb0" +
	"\xcb\x073\x03\x1c[A\xc1V@\x9f\xdb^!\x9b\xef" +
	"\xb1 \x95\x95\xabGV\xf9\x19\x00D\x06\x95\x04'\xea" +
	"\x8fE6$\xc2\xdd\xf1xZry\x1064\xc6\x8b" +
	"\x03\x88\x1b1\xab\xde~\xf20\xfb\"\xd3#\x04\xcd\xc7" +
	"\x15\x8c\xf1\x82s5\x13\x9a/\xba\x85\xbc`*\x879" +
	"z\xd6B\xb8\xe4\xb1j\xd6\xf4p\x97\xe20\x030\xc9" +
	"{M-\xf1\x7f\xc0\x07\xf3\xa7S\xc1\xbc\x9ai\x08\x06" +
	"\x9c2\x9a\x9bX\xb2\xd1\xc4b\xb6\xe090\xaf&\xef" +
	"-m\xc7\xa4a\x93\x96\xf5\xdb\xc4rZ\x08\x9a\xa7\x14" +
	",\x96\xe8\x90U\xfe\x1c\xeaN\xe8\x88\xc5\x04\xd1$\xdb" +
	"\xd1\xe1\xbaK\xe1.\xd7\x87K\xe5$\x05\x9e\x044\x08" +
	"\xca\xd7\x93\x0d\xb5k\x17]\xfa\x02V\x07KV\x82\xd5" +
	"\xca\xfc\x17\x00\x00\xff\xff\xdd\x0c\x1e,"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c4b468a2826bb79b,
		Nodes: []uint64{
			0x8f7ad1d41e816a04,
			0x991dedbdd762c2c4,
			0xa064f017cda4f80a,
			0xa4409943248dfd5c,
			0xa548460511093a50,
			0xaa964acaea262bc8,
			0xab248615ff957386,
			0xb0db66a28c40394c,
			0xbc40e8a99586a665,
			0xc081b3907385e196,
			0xc83cd0cad7e27568,
			0xcdbc9fb380c2572b,
			0xd1cd609cb22c8778,
			0xd73b4c8dfa07fc7f,
			0xe970781fd54f568e,
		},
		Compressed: true,
	})
}
