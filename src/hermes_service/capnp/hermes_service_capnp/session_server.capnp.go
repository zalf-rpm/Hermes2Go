// Code generated by capnpc-go. DO NOT EDIT.

package hermes_service_capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type SessionServer capnp.Client

// SessionServer_TypeID is the unique identifier for the type SessionServer.
const SessionServer_TypeID = 0xa064f017cda4f80a

func (c SessionServer) NewSession(ctx context.Context, params func(SessionServer_newSession_Params) error) (SessionServer_newSession_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa064f017cda4f80a,
			MethodID:      0,
			InterfaceName: "session_server.capnp:SessionServer",
			MethodName:    "newSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionServer_newSession_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionServer_newSession_Results_Future{Future: ans.Future()}, release

}

func (c SessionServer) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c SessionServer) String() string {
	return "SessionServer(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c SessionServer) AddRef() SessionServer {
	return SessionServer(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c SessionServer) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c SessionServer) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c SessionServer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (SessionServer) DecodeFromPtr(p capnp.Ptr) SessionServer {
	return SessionServer(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c SessionServer) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c SessionServer) IsSame(other SessionServer) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c SessionServer) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c SessionServer) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A SessionServer_Server is a SessionServer with a local implementation.
type SessionServer_Server interface {
	NewSession(context.Context, SessionServer_newSession) error
}

// SessionServer_NewServer creates a new Server from an implementation of SessionServer_Server.
func SessionServer_NewServer(s SessionServer_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SessionServer_Methods(nil, s), s, c)
}

// SessionServer_ServerToClient creates a new Client from an implementation of SessionServer_Server.
// The caller is responsible for calling Release on the returned Client.
func SessionServer_ServerToClient(s SessionServer_Server) SessionServer {
	return SessionServer(capnp.NewClient(SessionServer_NewServer(s)))
}

// SessionServer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SessionServer_Methods(methods []server.Method, s SessionServer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa064f017cda4f80a,
			MethodID:      0,
			InterfaceName: "session_server.capnp:SessionServer",
			MethodName:    "newSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewSession(ctx, SessionServer_newSession{call})
		},
	})

	return methods
}

// SessionServer_newSession holds the state for a server call to SessionServer.newSession.
// See server.Call for documentation.
type SessionServer_newSession struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionServer_newSession) Args() SessionServer_newSession_Params {
	return SessionServer_newSession_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionServer_newSession) AllocResults() (SessionServer_newSession_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionServer_newSession_Results(r), err
}

// SessionServer_List is a list of SessionServer.
type SessionServer_List = capnp.CapList[SessionServer]

// NewSessionServer_List creates a new list of SessionServer.
func NewSessionServer_List(s *capnp.Segment, sz int32) (SessionServer_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[SessionServer](l), err
}

type SessionServer_newSession_Params capnp.Struct

// SessionServer_newSession_Params_TypeID is the unique identifier for the type SessionServer_newSession_Params.
const SessionServer_newSession_Params_TypeID = 0xa548460511093a50

func NewSessionServer_newSession_Params(s *capnp.Segment) (SessionServer_newSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionServer_newSession_Params(st), err
}

func NewRootSessionServer_newSession_Params(s *capnp.Segment) (SessionServer_newSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionServer_newSession_Params(st), err
}

func ReadRootSessionServer_newSession_Params(msg *capnp.Message) (SessionServer_newSession_Params, error) {
	root, err := msg.Root()
	return SessionServer_newSession_Params(root.Struct()), err
}

func (s SessionServer_newSession_Params) String() string {
	str, _ := text.Marshal(0xa548460511093a50, capnp.Struct(s))
	return str
}

func (s SessionServer_newSession_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionServer_newSession_Params) DecodeFromPtr(p capnp.Ptr) SessionServer_newSession_Params {
	return SessionServer_newSession_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionServer_newSession_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionServer_newSession_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionServer_newSession_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionServer_newSession_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionServer_newSession_Params) Workdir() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SessionServer_newSession_Params) HasWorkdir() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionServer_newSession_Params) WorkdirBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SessionServer_newSession_Params) SetWorkdir(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SessionServer_newSession_Params) ResultCallback() Callback {
	p, _ := capnp.Struct(s).Ptr(1)
	return Callback(p.Interface().Client())
}

func (s SessionServer_newSession_Params) HasResultCallback() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionServer_newSession_Params) SetResultCallback(v Callback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// SessionServer_newSession_Params_List is a list of SessionServer_newSession_Params.
type SessionServer_newSession_Params_List = capnp.StructList[SessionServer_newSession_Params]

// NewSessionServer_newSession_Params creates a new list of SessionServer_newSession_Params.
func NewSessionServer_newSession_Params_List(s *capnp.Segment, sz int32) (SessionServer_newSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SessionServer_newSession_Params](l), err
}

// SessionServer_newSession_Params_Future is a wrapper for a SessionServer_newSession_Params promised by a client call.
type SessionServer_newSession_Params_Future struct{ *capnp.Future }

func (f SessionServer_newSession_Params_Future) Struct() (SessionServer_newSession_Params, error) {
	p, err := f.Future.Ptr()
	return SessionServer_newSession_Params(p.Struct()), err
}
func (p SessionServer_newSession_Params_Future) ResultCallback() Callback {
	return Callback(p.Future.Field(1, nil).Client())
}

type SessionServer_newSession_Results capnp.Struct

// SessionServer_newSession_Results_TypeID is the unique identifier for the type SessionServer_newSession_Results.
const SessionServer_newSession_Results_TypeID = 0xd1cd609cb22c8778

func NewSessionServer_newSession_Results(s *capnp.Segment) (SessionServer_newSession_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionServer_newSession_Results(st), err
}

func NewRootSessionServer_newSession_Results(s *capnp.Segment) (SessionServer_newSession_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionServer_newSession_Results(st), err
}

func ReadRootSessionServer_newSession_Results(msg *capnp.Message) (SessionServer_newSession_Results, error) {
	root, err := msg.Root()
	return SessionServer_newSession_Results(root.Struct()), err
}

func (s SessionServer_newSession_Results) String() string {
	str, _ := text.Marshal(0xd1cd609cb22c8778, capnp.Struct(s))
	return str
}

func (s SessionServer_newSession_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionServer_newSession_Results) DecodeFromPtr(p capnp.Ptr) SessionServer_newSession_Results {
	return SessionServer_newSession_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionServer_newSession_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionServer_newSession_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionServer_newSession_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionServer_newSession_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionServer_newSession_Results) Session() Session {
	p, _ := capnp.Struct(s).Ptr(0)
	return Session(p.Interface().Client())
}

func (s SessionServer_newSession_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionServer_newSession_Results) SetSession(v Session) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SessionServer_newSession_Results_List is a list of SessionServer_newSession_Results.
type SessionServer_newSession_Results_List = capnp.StructList[SessionServer_newSession_Results]

// NewSessionServer_newSession_Results creates a new list of SessionServer_newSession_Results.
func NewSessionServer_newSession_Results_List(s *capnp.Segment, sz int32) (SessionServer_newSession_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SessionServer_newSession_Results](l), err
}

// SessionServer_newSession_Results_Future is a wrapper for a SessionServer_newSession_Results promised by a client call.
type SessionServer_newSession_Results_Future struct{ *capnp.Future }

func (f SessionServer_newSession_Results_Future) Struct() (SessionServer_newSession_Results, error) {
	p, err := f.Future.Ptr()
	return SessionServer_newSession_Results(p.Struct()), err
}
func (p SessionServer_newSession_Results_Future) Session() Session {
	return Session(p.Future.Field(0, nil).Client())
}

type Session capnp.Client

// Session_TypeID is the unique identifier for the type Session.
const Session_TypeID = 0x991dedbdd762c2c4

func (c Session) Send(ctx context.Context, params func(Session_send_Params) error) (Session_send_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x991dedbdd762c2c4,
			MethodID:      0,
			InterfaceName: "session_server.capnp:Session",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Session_send_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Session_send_Results_Future{Future: ans.Future()}, release

}

func (c Session) Close(ctx context.Context, params func(Session_close_Params) error) (Session_close_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x991dedbdd762c2c4,
			MethodID:      1,
			InterfaceName: "session_server.capnp:Session",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Session_close_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Session_close_Results_Future{Future: ans.Future()}, release

}

func (c Session) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Session) String() string {
	return "Session(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Session) AddRef() Session {
	return Session(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Session) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Session) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Session) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Session) DecodeFromPtr(p capnp.Ptr) Session {
	return Session(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Session) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Session) IsSame(other Session) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Session) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Session) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Session_Server is a Session with a local implementation.
type Session_Server interface {
	Send(context.Context, Session_send) error

	Close(context.Context, Session_close) error
}

// Session_NewServer creates a new Server from an implementation of Session_Server.
func Session_NewServer(s Session_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Session_Methods(nil, s), s, c)
}

// Session_ServerToClient creates a new Client from an implementation of Session_Server.
// The caller is responsible for calling Release on the returned Client.
func Session_ServerToClient(s Session_Server) Session {
	return Session(capnp.NewClient(Session_NewServer(s)))
}

// Session_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Session_Methods(methods []server.Method, s Session_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x991dedbdd762c2c4,
			MethodID:      0,
			InterfaceName: "session_server.capnp:Session",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, Session_send{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x991dedbdd762c2c4,
			MethodID:      1,
			InterfaceName: "session_server.capnp:Session",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Session_close{call})
		},
	})

	return methods
}

// Session_send holds the state for a server call to Session.send.
// See server.Call for documentation.
type Session_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Session_send) Args() Session_send_Params {
	return Session_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Session_send) AllocResults() (Session_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_send_Results(r), err
}

// Session_close holds the state for a server call to Session.close.
// See server.Call for documentation.
type Session_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Session_close) Args() Session_close_Params {
	return Session_close_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Session_close) AllocResults() (Session_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Results(r), err
}

// Session_List is a list of Session.
type Session_List = capnp.CapList[Session]

// NewSession_List creates a new list of Session.
func NewSession_List(s *capnp.Segment, sz int32) (Session_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Session](l), err
}

type Session_send_Params capnp.Struct

// Session_send_Params_TypeID is the unique identifier for the type Session_send_Params.
const Session_send_Params_TypeID = 0xd73b4c8dfa07fc7f

func NewSession_send_Params(s *capnp.Segment) (Session_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Session_send_Params(st), err
}

func NewRootSession_send_Params(s *capnp.Segment) (Session_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Session_send_Params(st), err
}

func ReadRootSession_send_Params(msg *capnp.Message) (Session_send_Params, error) {
	root, err := msg.Root()
	return Session_send_Params(root.Struct()), err
}

func (s Session_send_Params) String() string {
	str, _ := text.Marshal(0xd73b4c8dfa07fc7f, capnp.Struct(s))
	return str
}

func (s Session_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_send_Params) DecodeFromPtr(p capnp.Ptr) Session_send_Params {
	return Session_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session_send_Params) RunId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Session_send_Params) HasRunId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Session_send_Params) RunIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Session_send_Params) SetRunId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Session_send_Params) Params() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Session_send_Params) HasParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Session_send_Params) SetParams(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewParams sets the params field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Session_send_Params) NewParams(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Session_send_Params_List is a list of Session_send_Params.
type Session_send_Params_List = capnp.StructList[Session_send_Params]

// NewSession_send_Params creates a new list of Session_send_Params.
func NewSession_send_Params_List(s *capnp.Segment, sz int32) (Session_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Session_send_Params](l), err
}

// Session_send_Params_Future is a wrapper for a Session_send_Params promised by a client call.
type Session_send_Params_Future struct{ *capnp.Future }

func (f Session_send_Params_Future) Struct() (Session_send_Params, error) {
	p, err := f.Future.Ptr()
	return Session_send_Params(p.Struct()), err
}

type Session_send_Results capnp.Struct

// Session_send_Results_TypeID is the unique identifier for the type Session_send_Results.
const Session_send_Results_TypeID = 0xb0db66a28c40394c

func NewSession_send_Results(s *capnp.Segment) (Session_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_send_Results(st), err
}

func NewRootSession_send_Results(s *capnp.Segment) (Session_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_send_Results(st), err
}

func ReadRootSession_send_Results(msg *capnp.Message) (Session_send_Results, error) {
	root, err := msg.Root()
	return Session_send_Results(root.Struct()), err
}

func (s Session_send_Results) String() string {
	str, _ := text.Marshal(0xb0db66a28c40394c, capnp.Struct(s))
	return str
}

func (s Session_send_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_send_Results) DecodeFromPtr(p capnp.Ptr) Session_send_Results {
	return Session_send_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_send_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_send_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_send_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_send_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Session_send_Results_List is a list of Session_send_Results.
type Session_send_Results_List = capnp.StructList[Session_send_Results]

// NewSession_send_Results creates a new list of Session_send_Results.
func NewSession_send_Results_List(s *capnp.Segment, sz int32) (Session_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Session_send_Results](l), err
}

// Session_send_Results_Future is a wrapper for a Session_send_Results promised by a client call.
type Session_send_Results_Future struct{ *capnp.Future }

func (f Session_send_Results_Future) Struct() (Session_send_Results, error) {
	p, err := f.Future.Ptr()
	return Session_send_Results(p.Struct()), err
}

type Session_close_Params capnp.Struct

// Session_close_Params_TypeID is the unique identifier for the type Session_close_Params.
const Session_close_Params_TypeID = 0xa4409943248dfd5c

func NewSession_close_Params(s *capnp.Segment) (Session_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Params(st), err
}

func NewRootSession_close_Params(s *capnp.Segment) (Session_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Params(st), err
}

func ReadRootSession_close_Params(msg *capnp.Message) (Session_close_Params, error) {
	root, err := msg.Root()
	return Session_close_Params(root.Struct()), err
}

func (s Session_close_Params) String() string {
	str, _ := text.Marshal(0xa4409943248dfd5c, capnp.Struct(s))
	return str
}

func (s Session_close_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_close_Params) DecodeFromPtr(p capnp.Ptr) Session_close_Params {
	return Session_close_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_close_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_close_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_close_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_close_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Session_close_Params_List is a list of Session_close_Params.
type Session_close_Params_List = capnp.StructList[Session_close_Params]

// NewSession_close_Params creates a new list of Session_close_Params.
func NewSession_close_Params_List(s *capnp.Segment, sz int32) (Session_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Session_close_Params](l), err
}

// Session_close_Params_Future is a wrapper for a Session_close_Params promised by a client call.
type Session_close_Params_Future struct{ *capnp.Future }

func (f Session_close_Params_Future) Struct() (Session_close_Params, error) {
	p, err := f.Future.Ptr()
	return Session_close_Params(p.Struct()), err
}

type Session_close_Results capnp.Struct

// Session_close_Results_TypeID is the unique identifier for the type Session_close_Results.
const Session_close_Results_TypeID = 0xc081b3907385e196

func NewSession_close_Results(s *capnp.Segment) (Session_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Results(st), err
}

func NewRootSession_close_Results(s *capnp.Segment) (Session_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Results(st), err
}

func ReadRootSession_close_Results(msg *capnp.Message) (Session_close_Results, error) {
	root, err := msg.Root()
	return Session_close_Results(root.Struct()), err
}

func (s Session_close_Results) String() string {
	str, _ := text.Marshal(0xc081b3907385e196, capnp.Struct(s))
	return str
}

func (s Session_close_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_close_Results) DecodeFromPtr(p capnp.Ptr) Session_close_Results {
	return Session_close_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_close_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_close_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_close_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_close_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Session_close_Results_List is a list of Session_close_Results.
type Session_close_Results_List = capnp.StructList[Session_close_Results]

// NewSession_close_Results creates a new list of Session_close_Results.
func NewSession_close_Results_List(s *capnp.Segment, sz int32) (Session_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Session_close_Results](l), err
}

// Session_close_Results_Future is a wrapper for a Session_close_Results promised by a client call.
type Session_close_Results_Future struct{ *capnp.Future }

func (f Session_close_Results_Future) Struct() (Session_close_Results, error) {
	p, err := f.Future.Ptr()
	return Session_close_Results(p.Struct()), err
}

type Callback capnp.Client

// Callback_TypeID is the unique identifier for the type Callback.
const Callback_TypeID = 0x8f7ad1d41e816a04

func (c Callback) SendData(ctx context.Context, params func(Callback_sendData_Params) error) (Callback_sendData_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      0,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "sendData",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Callback_sendData_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Callback_sendData_Results_Future{Future: ans.Future()}, release

}

func (c Callback) Done(ctx context.Context, params func(Callback_done_Params) error) (Callback_done_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      1,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Callback_done_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Callback_done_Results_Future{Future: ans.Future()}, release

}

func (c Callback) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Callback) String() string {
	return "Callback(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Callback) AddRef() Callback {
	return Callback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Callback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Callback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Callback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Callback) DecodeFromPtr(p capnp.Ptr) Callback {
	return Callback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Callback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Callback) IsSame(other Callback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Callback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Callback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Callback_Server is a Callback with a local implementation.
type Callback_Server interface {
	SendData(context.Context, Callback_sendData) error

	Done(context.Context, Callback_done) error
}

// Callback_NewServer creates a new Server from an implementation of Callback_Server.
func Callback_NewServer(s Callback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Callback_Methods(nil, s), s, c)
}

// Callback_ServerToClient creates a new Client from an implementation of Callback_Server.
// The caller is responsible for calling Release on the returned Client.
func Callback_ServerToClient(s Callback_Server) Callback {
	return Callback(capnp.NewClient(Callback_NewServer(s)))
}

// Callback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Callback_Methods(methods []server.Method, s Callback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      0,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "sendData",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendData(ctx, Callback_sendData{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      1,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, Callback_done{call})
		},
	})

	return methods
}

// Callback_sendData holds the state for a server call to Callback.sendData.
// See server.Call for documentation.
type Callback_sendData struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Callback_sendData) Args() Callback_sendData_Params {
	return Callback_sendData_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Callback_sendData) AllocResults() (Callback_sendData_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendData_Results(r), err
}

// Callback_done holds the state for a server call to Callback.done.
// See server.Call for documentation.
type Callback_done struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Callback_done) Args() Callback_done_Params {
	return Callback_done_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Callback_done) AllocResults() (Callback_done_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_done_Results(r), err
}

// Callback_List is a list of Callback.
type Callback_List = capnp.CapList[Callback]

// NewCallback_List creates a new list of Callback.
func NewCallback_List(s *capnp.Segment, sz int32) (Callback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Callback](l), err
}

type Callback_sendData_Params capnp.Struct

// Callback_sendData_Params_TypeID is the unique identifier for the type Callback_sendData_Params.
const Callback_sendData_Params_TypeID = 0xab248615ff957386

func NewCallback_sendData_Params(s *capnp.Segment) (Callback_sendData_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Callback_sendData_Params(st), err
}

func NewRootCallback_sendData_Params(s *capnp.Segment) (Callback_sendData_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Callback_sendData_Params(st), err
}

func ReadRootCallback_sendData_Params(msg *capnp.Message) (Callback_sendData_Params, error) {
	root, err := msg.Root()
	return Callback_sendData_Params(root.Struct()), err
}

func (s Callback_sendData_Params) String() string {
	str, _ := text.Marshal(0xab248615ff957386, capnp.Struct(s))
	return str
}

func (s Callback_sendData_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_sendData_Params) DecodeFromPtr(p capnp.Ptr) Callback_sendData_Params {
	return Callback_sendData_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_sendData_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_sendData_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_sendData_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_sendData_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Callback_sendData_Params) RunId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Callback_sendData_Params) HasRunId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Callback_sendData_Params) RunIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Callback_sendData_Params) SetRunId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Callback_sendData_Params) OutData() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Callback_sendData_Params) HasOutData() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Callback_sendData_Params) OutDataBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Callback_sendData_Params) SetOutData(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Callback_sendData_Params_List is a list of Callback_sendData_Params.
type Callback_sendData_Params_List = capnp.StructList[Callback_sendData_Params]

// NewCallback_sendData_Params creates a new list of Callback_sendData_Params.
func NewCallback_sendData_Params_List(s *capnp.Segment, sz int32) (Callback_sendData_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Callback_sendData_Params](l), err
}

// Callback_sendData_Params_Future is a wrapper for a Callback_sendData_Params promised by a client call.
type Callback_sendData_Params_Future struct{ *capnp.Future }

func (f Callback_sendData_Params_Future) Struct() (Callback_sendData_Params, error) {
	p, err := f.Future.Ptr()
	return Callback_sendData_Params(p.Struct()), err
}

type Callback_sendData_Results capnp.Struct

// Callback_sendData_Results_TypeID is the unique identifier for the type Callback_sendData_Results.
const Callback_sendData_Results_TypeID = 0xc83cd0cad7e27568

func NewCallback_sendData_Results(s *capnp.Segment) (Callback_sendData_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendData_Results(st), err
}

func NewRootCallback_sendData_Results(s *capnp.Segment) (Callback_sendData_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendData_Results(st), err
}

func ReadRootCallback_sendData_Results(msg *capnp.Message) (Callback_sendData_Results, error) {
	root, err := msg.Root()
	return Callback_sendData_Results(root.Struct()), err
}

func (s Callback_sendData_Results) String() string {
	str, _ := text.Marshal(0xc83cd0cad7e27568, capnp.Struct(s))
	return str
}

func (s Callback_sendData_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_sendData_Results) DecodeFromPtr(p capnp.Ptr) Callback_sendData_Results {
	return Callback_sendData_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_sendData_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_sendData_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_sendData_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_sendData_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Callback_sendData_Results_List is a list of Callback_sendData_Results.
type Callback_sendData_Results_List = capnp.StructList[Callback_sendData_Results]

// NewCallback_sendData_Results creates a new list of Callback_sendData_Results.
func NewCallback_sendData_Results_List(s *capnp.Segment, sz int32) (Callback_sendData_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Callback_sendData_Results](l), err
}

// Callback_sendData_Results_Future is a wrapper for a Callback_sendData_Results promised by a client call.
type Callback_sendData_Results_Future struct{ *capnp.Future }

func (f Callback_sendData_Results_Future) Struct() (Callback_sendData_Results, error) {
	p, err := f.Future.Ptr()
	return Callback_sendData_Results(p.Struct()), err
}

type Callback_done_Params capnp.Struct

// Callback_done_Params_TypeID is the unique identifier for the type Callback_done_Params.
const Callback_done_Params_TypeID = 0xe970781fd54f568e

func NewCallback_done_Params(s *capnp.Segment) (Callback_done_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Callback_done_Params(st), err
}

func NewRootCallback_done_Params(s *capnp.Segment) (Callback_done_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Callback_done_Params(st), err
}

func ReadRootCallback_done_Params(msg *capnp.Message) (Callback_done_Params, error) {
	root, err := msg.Root()
	return Callback_done_Params(root.Struct()), err
}

func (s Callback_done_Params) String() string {
	str, _ := text.Marshal(0xe970781fd54f568e, capnp.Struct(s))
	return str
}

func (s Callback_done_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_done_Params) DecodeFromPtr(p capnp.Ptr) Callback_done_Params {
	return Callback_done_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_done_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_done_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_done_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_done_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Callback_done_Params) RunId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Callback_done_Params) HasRunId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Callback_done_Params) RunIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Callback_done_Params) SetRunId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Callback_done_Params_List is a list of Callback_done_Params.
type Callback_done_Params_List = capnp.StructList[Callback_done_Params]

// NewCallback_done_Params creates a new list of Callback_done_Params.
func NewCallback_done_Params_List(s *capnp.Segment, sz int32) (Callback_done_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Callback_done_Params](l), err
}

// Callback_done_Params_Future is a wrapper for a Callback_done_Params promised by a client call.
type Callback_done_Params_Future struct{ *capnp.Future }

func (f Callback_done_Params_Future) Struct() (Callback_done_Params, error) {
	p, err := f.Future.Ptr()
	return Callback_done_Params(p.Struct()), err
}

type Callback_done_Results capnp.Struct

// Callback_done_Results_TypeID is the unique identifier for the type Callback_done_Results.
const Callback_done_Results_TypeID = 0xbc40e8a99586a665

func NewCallback_done_Results(s *capnp.Segment) (Callback_done_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_done_Results(st), err
}

func NewRootCallback_done_Results(s *capnp.Segment) (Callback_done_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_done_Results(st), err
}

func ReadRootCallback_done_Results(msg *capnp.Message) (Callback_done_Results, error) {
	root, err := msg.Root()
	return Callback_done_Results(root.Struct()), err
}

func (s Callback_done_Results) String() string {
	str, _ := text.Marshal(0xbc40e8a99586a665, capnp.Struct(s))
	return str
}

func (s Callback_done_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_done_Results) DecodeFromPtr(p capnp.Ptr) Callback_done_Results {
	return Callback_done_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_done_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_done_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_done_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_done_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Callback_done_Results_List is a list of Callback_done_Results.
type Callback_done_Results_List = capnp.StructList[Callback_done_Results]

// NewCallback_done_Results creates a new list of Callback_done_Results.
func NewCallback_done_Results_List(s *capnp.Segment, sz int32) (Callback_done_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Callback_done_Results](l), err
}

// Callback_done_Results_Future is a wrapper for a Callback_done_Results promised by a client call.
type Callback_done_Results_Future struct{ *capnp.Future }

func (f Callback_done_Results_Future) Struct() (Callback_done_Results, error) {
	p, err := f.Future.Ptr()
	return Callback_done_Results(p.Struct()), err
}

const schema_c4b468a2826bb79b = "x\xda\x94T_HSa\x14?\xe7~w]\x0du" +
	"|\\%\x0c\xe6\x88&\xb4\xd0\xe1\xb4\x87\xb2b\xa3I" +
	"\x7fDhwB\x90\x04uu74\xe7\xdd\xbawS" +
	"\xf3e\x18\xa4/\xd9\x9f\x07\x03\xa9\x87\x12\x0b\xaa\x97\xb0" +
	"\xa0\x97\x82\x08\x1f\xa2\x10\x12\x12\x1f\"\xc2\x9e*\x10\xa2" +
	"\xa7\x88\xe4\xc6\xf7mw\x9b\xd3i\xbd~\xe7w~\xbf" +
	"\xdf9\xbfso\xd3;\x0c\x8a\xfe\xca\xcf\x0e\x10\x946" +
	"\xc76K\xbc0Z\xf7aa\xe4:\xd0\x1ab\xdd~" +
	"\xde\x7fy\xba\xf7\xd9\x1c\x00\xca\x8b\xc2OyY\x90\x00" +
	"\xe4O\xc2\xb8\xec'\x12\x805\xf7\xba{\xe9\xe5\x8ak" +
	"j\x1d\xb8\x96|\x97\xeb\x19D\xdeE\xc6\xe5\x8b\x1c\xbc" +
	"\xfd\xd7\xcc\xfc\x8e\x1f\xd1\xbb\xc5\xe0\x96\xd3d'\xca}" +
	"\x1c\xad\x91c\xf2M\x8e>\xb3:\xe1\x09M\x05g\x80" +
	"\xba\x10@\x94\x00Z.\x91\x08\x82h\x85[\xcb\xa9\xe3" +
	"\xe8\xf1\xfb@w#\x80\x83Yj\xd1\xc8#\x04\x94S" +
	"d\x08\xd0\x1a3'\xad\x9a1\xcfc\xa0u9\xc0\"" +
	"1\x18`\x99\x03:\x0e\x04\xafN\x9f\xff\xf8\xa4\x80\xfb" +
	"\xb0\xc8\xb9\xb5\x07c\x93\x0f\xbf\x06_dZy\xc5+" +
	"v\xb1\xca\xad\xe5+\xe6\x8d\xa7\xa3\xaf\x0azj2\x95" +
	"\xde\xd4\x97\xa5\xb7\xef\x0f\xbd)\xe8Aq\x84U\x86\xc7" +
	"\x1bf\xef\x9c\x9b_\xc8:EVZ!\xb3\xcc\xc8*" +
	"\x09\x00Z\xe9?\xd2\xef\x89\x8e\x83K\x19\xd2\x8cS\x97" +
	"\xd8\xce\x00^\x919\xbdv\xea\xe4\xa2{8\xf1-;" +
	"\x0ag\x98dVQ\xbe'\x06\xa0\xd125\xd3\xec\x8b" +
	"\xebg\x05S3\x065\xc3\xd7\xa3&\xf4DkH\x8d" +
	"\xb9c\xddjO\x7f\x18Q)#\x0e\x80\xdcR\xd0\xb6" +
	"K\xfd\xed P\xaf\x84y\x15\xb4\xc7\xa7\xae\xbd P" +
	"*Y\xa6\xa6G\xdb\xd4\xa4\x0a\x00AtF\xe3\xba\x16" +
	"\xc40b\x09\xd9N\xcdt\xb2\xe7\xbc\xaa= \xda+" +
	"\xa7~\xc6\\\xcfT\xed\x84\xd1^-\xadm\x06\x81V" +
	"JN\xa6\x1aDwO,n\x16\xe9\x91b=\xf6\xda" +
	"\xa9\x19\x83D3\x98\xaa\xc8U\xed\x0bA;\x00J\xbb" +
	"@\xa0\xe5\x92\xa5kC\xbc\x09H\\_\xcb,n\xc4" +
	"\xec\xe3\x16<a\xd5P\x07\xd0\xcca\x1d\xa5\\h\x86" +
	"\xcfV\x88\xeb\x9e\xb0\xea4\xd4\x01S)#\"\x80\x88" +
	"\x00\xd4{\x04@\xf1\x10T\x9a\x04\xa4\x88\xd5\xc8\x1e\x1b" +
	"G\x00\x94\x06\x82\xca~\x01\xd3Cq\xa3?\xdag`" +
	"\x05\x08X\x01h\x19\x9a\x99\x8a%C*\x04b<P" +
	"\xa4\xf9/\x14\x10)\x94\x9a \xa4f\x1a|v\x84\x9e" +
	"\xb0[-\xb6\xd3\xbc\x91\x1d\xe6q\x0fAe\x9f\x80n" +
	"#\xa5\x9f\x88\xdaf\xd2\xf1T\x921\xe5\xccm\xbe;" +
	"&\xec\x89p\xff\x05\xbb+\xe1\x92\x9dV\x06L\x92\xe6" +
	"?\x85\xb2\x05x\xfd\xfc\x91\x00\xf7\xf2\xdf1F47" +
	"\xefS\xc4\xdc\xe2*\xd9\x8e\xca\x08*\xd5\x02\xa6\xb3t" +
	"H\xf3\xbf\xc3M\x93Y\xb3\x1f~Z&g\xdb<\x95" +
	"\xd6l*m\xc5\xa9\x04\x12\x9c\x02\xab\x00\xc3\x04\xf9k" +
	"\xd5\xd6W\xc1\xf7\x9d\xbd\xeb\xc2\xc1\x9a\xf3\x83\xad\x95\xf9" +
	"\x1b\x00\x00\xff\xff\x04\xf0\xcek"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c4b468a2826bb79b,
		Nodes: []uint64{
			0x8f7ad1d41e816a04,
			0x991dedbdd762c2c4,
			0xa064f017cda4f80a,
			0xa4409943248dfd5c,
			0xa548460511093a50,
			0xab248615ff957386,
			0xb0db66a28c40394c,
			0xbc40e8a99586a665,
			0xc081b3907385e196,
			0xc83cd0cad7e27568,
			0xd1cd609cb22c8778,
			0xd73b4c8dfa07fc7f,
			0xe970781fd54f568e,
		},
		Compressed: true,
	})
}
