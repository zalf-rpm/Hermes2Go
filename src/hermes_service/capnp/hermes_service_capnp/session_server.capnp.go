// Code generated by capnpc-go. DO NOT EDIT.

package hermes_service_capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type SessionServer capnp.Client

// SessionServer_TypeID is the unique identifier for the type SessionServer.
const SessionServer_TypeID = 0xa064f017cda4f80a

func (c SessionServer) NewSession(ctx context.Context, params func(SessionServer_newSession_Params) error) (SessionServer_newSession_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa064f017cda4f80a,
			MethodID:      0,
			InterfaceName: "session_server.capnp:SessionServer",
			MethodName:    "newSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionServer_newSession_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionServer_newSession_Results_Future{Future: ans.Future()}, release

}

func (c SessionServer) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c SessionServer) String() string {
	return "SessionServer(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c SessionServer) AddRef() SessionServer {
	return SessionServer(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c SessionServer) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c SessionServer) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c SessionServer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (SessionServer) DecodeFromPtr(p capnp.Ptr) SessionServer {
	return SessionServer(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c SessionServer) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c SessionServer) IsSame(other SessionServer) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c SessionServer) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c SessionServer) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A SessionServer_Server is a SessionServer with a local implementation.
type SessionServer_Server interface {
	NewSession(context.Context, SessionServer_newSession) error
}

// SessionServer_NewServer creates a new Server from an implementation of SessionServer_Server.
func SessionServer_NewServer(s SessionServer_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SessionServer_Methods(nil, s), s, c)
}

// SessionServer_ServerToClient creates a new Client from an implementation of SessionServer_Server.
// The caller is responsible for calling Release on the returned Client.
func SessionServer_ServerToClient(s SessionServer_Server) SessionServer {
	return SessionServer(capnp.NewClient(SessionServer_NewServer(s)))
}

// SessionServer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SessionServer_Methods(methods []server.Method, s SessionServer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa064f017cda4f80a,
			MethodID:      0,
			InterfaceName: "session_server.capnp:SessionServer",
			MethodName:    "newSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewSession(ctx, SessionServer_newSession{call})
		},
	})

	return methods
}

// SessionServer_newSession holds the state for a server call to SessionServer.newSession.
// See server.Call for documentation.
type SessionServer_newSession struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionServer_newSession) Args() SessionServer_newSession_Params {
	return SessionServer_newSession_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionServer_newSession) AllocResults() (SessionServer_newSession_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionServer_newSession_Results(r), err
}

// SessionServer_List is a list of SessionServer.
type SessionServer_List = capnp.CapList[SessionServer]

// NewSessionServer_List creates a new list of SessionServer.
func NewSessionServer_List(s *capnp.Segment, sz int32) (SessionServer_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[SessionServer](l), err
}

type SessionServer_newSession_Params capnp.Struct

// SessionServer_newSession_Params_TypeID is the unique identifier for the type SessionServer_newSession_Params.
const SessionServer_newSession_Params_TypeID = 0xa548460511093a50

func NewSessionServer_newSession_Params(s *capnp.Segment) (SessionServer_newSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionServer_newSession_Params(st), err
}

func NewRootSessionServer_newSession_Params(s *capnp.Segment) (SessionServer_newSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionServer_newSession_Params(st), err
}

func ReadRootSessionServer_newSession_Params(msg *capnp.Message) (SessionServer_newSession_Params, error) {
	root, err := msg.Root()
	return SessionServer_newSession_Params(root.Struct()), err
}

func (s SessionServer_newSession_Params) String() string {
	str, _ := text.Marshal(0xa548460511093a50, capnp.Struct(s))
	return str
}

func (s SessionServer_newSession_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionServer_newSession_Params) DecodeFromPtr(p capnp.Ptr) SessionServer_newSession_Params {
	return SessionServer_newSession_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionServer_newSession_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionServer_newSession_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionServer_newSession_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionServer_newSession_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionServer_newSession_Params) Env() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SessionServer_newSession_Params) HasEnv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionServer_newSession_Params) EnvBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SessionServer_newSession_Params) SetEnv(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// SessionServer_newSession_Params_List is a list of SessionServer_newSession_Params.
type SessionServer_newSession_Params_List = capnp.StructList[SessionServer_newSession_Params]

// NewSessionServer_newSession_Params creates a new list of SessionServer_newSession_Params.
func NewSessionServer_newSession_Params_List(s *capnp.Segment, sz int32) (SessionServer_newSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SessionServer_newSession_Params](l), err
}

// SessionServer_newSession_Params_Future is a wrapper for a SessionServer_newSession_Params promised by a client call.
type SessionServer_newSession_Params_Future struct{ *capnp.Future }

func (f SessionServer_newSession_Params_Future) Struct() (SessionServer_newSession_Params, error) {
	p, err := f.Future.Ptr()
	return SessionServer_newSession_Params(p.Struct()), err
}

type SessionServer_newSession_Results capnp.Struct

// SessionServer_newSession_Results_TypeID is the unique identifier for the type SessionServer_newSession_Results.
const SessionServer_newSession_Results_TypeID = 0xd1cd609cb22c8778

func NewSessionServer_newSession_Results(s *capnp.Segment) (SessionServer_newSession_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionServer_newSession_Results(st), err
}

func NewRootSessionServer_newSession_Results(s *capnp.Segment) (SessionServer_newSession_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionServer_newSession_Results(st), err
}

func ReadRootSessionServer_newSession_Results(msg *capnp.Message) (SessionServer_newSession_Results, error) {
	root, err := msg.Root()
	return SessionServer_newSession_Results(root.Struct()), err
}

func (s SessionServer_newSession_Results) String() string {
	str, _ := text.Marshal(0xd1cd609cb22c8778, capnp.Struct(s))
	return str
}

func (s SessionServer_newSession_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionServer_newSession_Results) DecodeFromPtr(p capnp.Ptr) SessionServer_newSession_Results {
	return SessionServer_newSession_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionServer_newSession_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionServer_newSession_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionServer_newSession_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionServer_newSession_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionServer_newSession_Results) Session() Session {
	p, _ := capnp.Struct(s).Ptr(0)
	return Session(p.Interface().Client())
}

func (s SessionServer_newSession_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionServer_newSession_Results) SetSession(v Session) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SessionServer_newSession_Results_List is a list of SessionServer_newSession_Results.
type SessionServer_newSession_Results_List = capnp.StructList[SessionServer_newSession_Results]

// NewSessionServer_newSession_Results creates a new list of SessionServer_newSession_Results.
func NewSessionServer_newSession_Results_List(s *capnp.Segment, sz int32) (SessionServer_newSession_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SessionServer_newSession_Results](l), err
}

// SessionServer_newSession_Results_Future is a wrapper for a SessionServer_newSession_Results promised by a client call.
type SessionServer_newSession_Results_Future struct{ *capnp.Future }

func (f SessionServer_newSession_Results_Future) Struct() (SessionServer_newSession_Results, error) {
	p, err := f.Future.Ptr()
	return SessionServer_newSession_Results(p.Struct()), err
}
func (p SessionServer_newSession_Results_Future) Session() Session {
	return Session(p.Future.Field(0, nil).Client())
}

type Session capnp.Client

// Session_TypeID is the unique identifier for the type Session.
const Session_TypeID = 0x991dedbdd762c2c4

func (c Session) Send(ctx context.Context, params func(Session_send_Params) error) (Session_send_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x991dedbdd762c2c4,
			MethodID:      0,
			InterfaceName: "session_server.capnp:Session",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Session_send_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Session_send_Results_Future{Future: ans.Future()}, release

}

func (c Session) Close(ctx context.Context, params func(Session_close_Params) error) (Session_close_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x991dedbdd762c2c4,
			MethodID:      1,
			InterfaceName: "session_server.capnp:Session",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Session_close_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Session_close_Results_Future{Future: ans.Future()}, release

}

func (c Session) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Session) String() string {
	return "Session(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Session) AddRef() Session {
	return Session(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Session) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Session) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Session) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Session) DecodeFromPtr(p capnp.Ptr) Session {
	return Session(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Session) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Session) IsSame(other Session) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Session) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Session) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Session_Server is a Session with a local implementation.
type Session_Server interface {
	Send(context.Context, Session_send) error

	Close(context.Context, Session_close) error
}

// Session_NewServer creates a new Server from an implementation of Session_Server.
func Session_NewServer(s Session_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Session_Methods(nil, s), s, c)
}

// Session_ServerToClient creates a new Client from an implementation of Session_Server.
// The caller is responsible for calling Release on the returned Client.
func Session_ServerToClient(s Session_Server) Session {
	return Session(capnp.NewClient(Session_NewServer(s)))
}

// Session_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Session_Methods(methods []server.Method, s Session_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x991dedbdd762c2c4,
			MethodID:      0,
			InterfaceName: "session_server.capnp:Session",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, Session_send{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x991dedbdd762c2c4,
			MethodID:      1,
			InterfaceName: "session_server.capnp:Session",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Session_close{call})
		},
	})

	return methods
}

// Session_send holds the state for a server call to Session.send.
// See server.Call for documentation.
type Session_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Session_send) Args() Session_send_Params {
	return Session_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Session_send) AllocResults() (Session_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_send_Results(r), err
}

// Session_close holds the state for a server call to Session.close.
// See server.Call for documentation.
type Session_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Session_close) Args() Session_close_Params {
	return Session_close_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Session_close) AllocResults() (Session_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Results(r), err
}

// Session_List is a list of Session.
type Session_List = capnp.CapList[Session]

// NewSession_List creates a new list of Session.
func NewSession_List(s *capnp.Segment, sz int32) (Session_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Session](l), err
}

type Session_send_Params capnp.Struct

// Session_send_Params_TypeID is the unique identifier for the type Session_send_Params.
const Session_send_Params_TypeID = 0xd73b4c8dfa07fc7f

func NewSession_send_Params(s *capnp.Segment) (Session_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Session_send_Params(st), err
}

func NewRootSession_send_Params(s *capnp.Segment) (Session_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Session_send_Params(st), err
}

func ReadRootSession_send_Params(msg *capnp.Message) (Session_send_Params, error) {
	root, err := msg.Root()
	return Session_send_Params(root.Struct()), err
}

func (s Session_send_Params) String() string {
	str, _ := text.Marshal(0xd73b4c8dfa07fc7f, capnp.Struct(s))
	return str
}

func (s Session_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_send_Params) DecodeFromPtr(p capnp.Ptr) Session_send_Params {
	return Session_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session_send_Params) RunId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Session_send_Params) HasRunId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Session_send_Params) RunIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Session_send_Params) SetRunId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Session_send_Params) Params() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Session_send_Params) HasParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Session_send_Params) SetParams(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewParams sets the params field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Session_send_Params) NewParams(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Session_send_Params) ResultCallback() Callback {
	p, _ := capnp.Struct(s).Ptr(2)
	return Callback(p.Interface().Client())
}

func (s Session_send_Params) HasResultCallback() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Session_send_Params) SetResultCallback(v Callback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

// Session_send_Params_List is a list of Session_send_Params.
type Session_send_Params_List = capnp.StructList[Session_send_Params]

// NewSession_send_Params creates a new list of Session_send_Params.
func NewSession_send_Params_List(s *capnp.Segment, sz int32) (Session_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Session_send_Params](l), err
}

// Session_send_Params_Future is a wrapper for a Session_send_Params promised by a client call.
type Session_send_Params_Future struct{ *capnp.Future }

func (f Session_send_Params_Future) Struct() (Session_send_Params, error) {
	p, err := f.Future.Ptr()
	return Session_send_Params(p.Struct()), err
}
func (p Session_send_Params_Future) ResultCallback() Callback {
	return Callback(p.Future.Field(2, nil).Client())
}

type Session_send_Results capnp.Struct

// Session_send_Results_TypeID is the unique identifier for the type Session_send_Results.
const Session_send_Results_TypeID = 0xb0db66a28c40394c

func NewSession_send_Results(s *capnp.Segment) (Session_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_send_Results(st), err
}

func NewRootSession_send_Results(s *capnp.Segment) (Session_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_send_Results(st), err
}

func ReadRootSession_send_Results(msg *capnp.Message) (Session_send_Results, error) {
	root, err := msg.Root()
	return Session_send_Results(root.Struct()), err
}

func (s Session_send_Results) String() string {
	str, _ := text.Marshal(0xb0db66a28c40394c, capnp.Struct(s))
	return str
}

func (s Session_send_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_send_Results) DecodeFromPtr(p capnp.Ptr) Session_send_Results {
	return Session_send_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_send_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_send_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_send_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_send_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Session_send_Results_List is a list of Session_send_Results.
type Session_send_Results_List = capnp.StructList[Session_send_Results]

// NewSession_send_Results creates a new list of Session_send_Results.
func NewSession_send_Results_List(s *capnp.Segment, sz int32) (Session_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Session_send_Results](l), err
}

// Session_send_Results_Future is a wrapper for a Session_send_Results promised by a client call.
type Session_send_Results_Future struct{ *capnp.Future }

func (f Session_send_Results_Future) Struct() (Session_send_Results, error) {
	p, err := f.Future.Ptr()
	return Session_send_Results(p.Struct()), err
}

type Session_close_Params capnp.Struct

// Session_close_Params_TypeID is the unique identifier for the type Session_close_Params.
const Session_close_Params_TypeID = 0xa4409943248dfd5c

func NewSession_close_Params(s *capnp.Segment) (Session_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Params(st), err
}

func NewRootSession_close_Params(s *capnp.Segment) (Session_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Params(st), err
}

func ReadRootSession_close_Params(msg *capnp.Message) (Session_close_Params, error) {
	root, err := msg.Root()
	return Session_close_Params(root.Struct()), err
}

func (s Session_close_Params) String() string {
	str, _ := text.Marshal(0xa4409943248dfd5c, capnp.Struct(s))
	return str
}

func (s Session_close_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_close_Params) DecodeFromPtr(p capnp.Ptr) Session_close_Params {
	return Session_close_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_close_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_close_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_close_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_close_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Session_close_Params_List is a list of Session_close_Params.
type Session_close_Params_List = capnp.StructList[Session_close_Params]

// NewSession_close_Params creates a new list of Session_close_Params.
func NewSession_close_Params_List(s *capnp.Segment, sz int32) (Session_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Session_close_Params](l), err
}

// Session_close_Params_Future is a wrapper for a Session_close_Params promised by a client call.
type Session_close_Params_Future struct{ *capnp.Future }

func (f Session_close_Params_Future) Struct() (Session_close_Params, error) {
	p, err := f.Future.Ptr()
	return Session_close_Params(p.Struct()), err
}

type Session_close_Results capnp.Struct

// Session_close_Results_TypeID is the unique identifier for the type Session_close_Results.
const Session_close_Results_TypeID = 0xc081b3907385e196

func NewSession_close_Results(s *capnp.Segment) (Session_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Results(st), err
}

func NewRootSession_close_Results(s *capnp.Segment) (Session_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Session_close_Results(st), err
}

func ReadRootSession_close_Results(msg *capnp.Message) (Session_close_Results, error) {
	root, err := msg.Root()
	return Session_close_Results(root.Struct()), err
}

func (s Session_close_Results) String() string {
	str, _ := text.Marshal(0xc081b3907385e196, capnp.Struct(s))
	return str
}

func (s Session_close_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_close_Results) DecodeFromPtr(p capnp.Ptr) Session_close_Results {
	return Session_close_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_close_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_close_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_close_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_close_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Session_close_Results_List is a list of Session_close_Results.
type Session_close_Results_List = capnp.StructList[Session_close_Results]

// NewSession_close_Results creates a new list of Session_close_Results.
func NewSession_close_Results_List(s *capnp.Segment, sz int32) (Session_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Session_close_Results](l), err
}

// Session_close_Results_Future is a wrapper for a Session_close_Results promised by a client call.
type Session_close_Results_Future struct{ *capnp.Future }

func (f Session_close_Results_Future) Struct() (Session_close_Results, error) {
	p, err := f.Future.Ptr()
	return Session_close_Results(p.Struct()), err
}

type Callback capnp.Client

// Callback_TypeID is the unique identifier for the type Callback.
const Callback_TypeID = 0x8f7ad1d41e816a04

func (c Callback) SendHeader(ctx context.Context, params func(Callback_sendHeader_Params) error) (Callback_sendHeader_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      0,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "sendHeader",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Callback_sendHeader_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Callback_sendHeader_Results_Future{Future: ans.Future()}, release

}

func (c Callback) SendResult(ctx context.Context, params func(Callback_sendResult_Params) error) (Callback_sendResult_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      1,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "sendResult",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Callback_sendResult_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Callback_sendResult_Results_Future{Future: ans.Future()}, release

}

func (c Callback) Done(ctx context.Context, params func(Callback_done_Params) error) (Callback_done_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      2,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Callback_done_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Callback_done_Results_Future{Future: ans.Future()}, release

}

func (c Callback) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Callback) String() string {
	return "Callback(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Callback) AddRef() Callback {
	return Callback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Callback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Callback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Callback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Callback) DecodeFromPtr(p capnp.Ptr) Callback {
	return Callback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Callback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Callback) IsSame(other Callback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Callback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Callback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Callback_Server is a Callback with a local implementation.
type Callback_Server interface {
	SendHeader(context.Context, Callback_sendHeader) error

	SendResult(context.Context, Callback_sendResult) error

	Done(context.Context, Callback_done) error
}

// Callback_NewServer creates a new Server from an implementation of Callback_Server.
func Callback_NewServer(s Callback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Callback_Methods(nil, s), s, c)
}

// Callback_ServerToClient creates a new Client from an implementation of Callback_Server.
// The caller is responsible for calling Release on the returned Client.
func Callback_ServerToClient(s Callback_Server) Callback {
	return Callback(capnp.NewClient(Callback_NewServer(s)))
}

// Callback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Callback_Methods(methods []server.Method, s Callback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      0,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "sendHeader",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendHeader(ctx, Callback_sendHeader{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      1,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "sendResult",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendResult(ctx, Callback_sendResult{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f7ad1d41e816a04,
			MethodID:      2,
			InterfaceName: "session_server.capnp:Callback",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, Callback_done{call})
		},
	})

	return methods
}

// Callback_sendHeader holds the state for a server call to Callback.sendHeader.
// See server.Call for documentation.
type Callback_sendHeader struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Callback_sendHeader) Args() Callback_sendHeader_Params {
	return Callback_sendHeader_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Callback_sendHeader) AllocResults() (Callback_sendHeader_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendHeader_Results(r), err
}

// Callback_sendResult holds the state for a server call to Callback.sendResult.
// See server.Call for documentation.
type Callback_sendResult struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Callback_sendResult) Args() Callback_sendResult_Params {
	return Callback_sendResult_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Callback_sendResult) AllocResults() (Callback_sendResult_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendResult_Results(r), err
}

// Callback_done holds the state for a server call to Callback.done.
// See server.Call for documentation.
type Callback_done struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Callback_done) Args() Callback_done_Params {
	return Callback_done_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Callback_done) AllocResults() (Callback_done_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_done_Results(r), err
}

// Callback_List is a list of Callback.
type Callback_List = capnp.CapList[Callback]

// NewCallback_List creates a new list of Callback.
func NewCallback_List(s *capnp.Segment, sz int32) (Callback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Callback](l), err
}

type Callback_sendHeader_Params capnp.Struct

// Callback_sendHeader_Params_TypeID is the unique identifier for the type Callback_sendHeader_Params.
const Callback_sendHeader_Params_TypeID = 0xab248615ff957386

func NewCallback_sendHeader_Params(s *capnp.Segment) (Callback_sendHeader_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Callback_sendHeader_Params(st), err
}

func NewRootCallback_sendHeader_Params(s *capnp.Segment) (Callback_sendHeader_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Callback_sendHeader_Params(st), err
}

func ReadRootCallback_sendHeader_Params(msg *capnp.Message) (Callback_sendHeader_Params, error) {
	root, err := msg.Root()
	return Callback_sendHeader_Params(root.Struct()), err
}

func (s Callback_sendHeader_Params) String() string {
	str, _ := text.Marshal(0xab248615ff957386, capnp.Struct(s))
	return str
}

func (s Callback_sendHeader_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_sendHeader_Params) DecodeFromPtr(p capnp.Ptr) Callback_sendHeader_Params {
	return Callback_sendHeader_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_sendHeader_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_sendHeader_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_sendHeader_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_sendHeader_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Callback_sendHeader_Params) RunId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Callback_sendHeader_Params) HasRunId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Callback_sendHeader_Params) RunIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Callback_sendHeader_Params) SetRunId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Callback_sendHeader_Params) Header() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Callback_sendHeader_Params) HasHeader() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Callback_sendHeader_Params) SetHeader(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Callback_sendHeader_Params) NewHeader(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Callback_sendHeader_Params_List is a list of Callback_sendHeader_Params.
type Callback_sendHeader_Params_List = capnp.StructList[Callback_sendHeader_Params]

// NewCallback_sendHeader_Params creates a new list of Callback_sendHeader_Params.
func NewCallback_sendHeader_Params_List(s *capnp.Segment, sz int32) (Callback_sendHeader_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Callback_sendHeader_Params](l), err
}

// Callback_sendHeader_Params_Future is a wrapper for a Callback_sendHeader_Params promised by a client call.
type Callback_sendHeader_Params_Future struct{ *capnp.Future }

func (f Callback_sendHeader_Params_Future) Struct() (Callback_sendHeader_Params, error) {
	p, err := f.Future.Ptr()
	return Callback_sendHeader_Params(p.Struct()), err
}

type Callback_sendHeader_Results capnp.Struct

// Callback_sendHeader_Results_TypeID is the unique identifier for the type Callback_sendHeader_Results.
const Callback_sendHeader_Results_TypeID = 0xc83cd0cad7e27568

func NewCallback_sendHeader_Results(s *capnp.Segment) (Callback_sendHeader_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendHeader_Results(st), err
}

func NewRootCallback_sendHeader_Results(s *capnp.Segment) (Callback_sendHeader_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendHeader_Results(st), err
}

func ReadRootCallback_sendHeader_Results(msg *capnp.Message) (Callback_sendHeader_Results, error) {
	root, err := msg.Root()
	return Callback_sendHeader_Results(root.Struct()), err
}

func (s Callback_sendHeader_Results) String() string {
	str, _ := text.Marshal(0xc83cd0cad7e27568, capnp.Struct(s))
	return str
}

func (s Callback_sendHeader_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_sendHeader_Results) DecodeFromPtr(p capnp.Ptr) Callback_sendHeader_Results {
	return Callback_sendHeader_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_sendHeader_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_sendHeader_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_sendHeader_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_sendHeader_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Callback_sendHeader_Results_List is a list of Callback_sendHeader_Results.
type Callback_sendHeader_Results_List = capnp.StructList[Callback_sendHeader_Results]

// NewCallback_sendHeader_Results creates a new list of Callback_sendHeader_Results.
func NewCallback_sendHeader_Results_List(s *capnp.Segment, sz int32) (Callback_sendHeader_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Callback_sendHeader_Results](l), err
}

// Callback_sendHeader_Results_Future is a wrapper for a Callback_sendHeader_Results promised by a client call.
type Callback_sendHeader_Results_Future struct{ *capnp.Future }

func (f Callback_sendHeader_Results_Future) Struct() (Callback_sendHeader_Results, error) {
	p, err := f.Future.Ptr()
	return Callback_sendHeader_Results(p.Struct()), err
}

type Callback_sendResult_Params capnp.Struct

// Callback_sendResult_Params_TypeID is the unique identifier for the type Callback_sendResult_Params.
const Callback_sendResult_Params_TypeID = 0xe970781fd54f568e

func NewCallback_sendResult_Params(s *capnp.Segment) (Callback_sendResult_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Callback_sendResult_Params(st), err
}

func NewRootCallback_sendResult_Params(s *capnp.Segment) (Callback_sendResult_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Callback_sendResult_Params(st), err
}

func ReadRootCallback_sendResult_Params(msg *capnp.Message) (Callback_sendResult_Params, error) {
	root, err := msg.Root()
	return Callback_sendResult_Params(root.Struct()), err
}

func (s Callback_sendResult_Params) String() string {
	str, _ := text.Marshal(0xe970781fd54f568e, capnp.Struct(s))
	return str
}

func (s Callback_sendResult_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_sendResult_Params) DecodeFromPtr(p capnp.Ptr) Callback_sendResult_Params {
	return Callback_sendResult_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_sendResult_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_sendResult_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_sendResult_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_sendResult_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Callback_sendResult_Params) RunId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Callback_sendResult_Params) HasRunId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Callback_sendResult_Params) RunIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Callback_sendResult_Params) SetRunId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Callback_sendResult_Params) ResultLine() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Callback_sendResult_Params) HasResultLine() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Callback_sendResult_Params) SetResultLine(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewResultLine sets the resultLine field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Callback_sendResult_Params) NewResultLine(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Callback_sendResult_Params_List is a list of Callback_sendResult_Params.
type Callback_sendResult_Params_List = capnp.StructList[Callback_sendResult_Params]

// NewCallback_sendResult_Params creates a new list of Callback_sendResult_Params.
func NewCallback_sendResult_Params_List(s *capnp.Segment, sz int32) (Callback_sendResult_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Callback_sendResult_Params](l), err
}

// Callback_sendResult_Params_Future is a wrapper for a Callback_sendResult_Params promised by a client call.
type Callback_sendResult_Params_Future struct{ *capnp.Future }

func (f Callback_sendResult_Params_Future) Struct() (Callback_sendResult_Params, error) {
	p, err := f.Future.Ptr()
	return Callback_sendResult_Params(p.Struct()), err
}

type Callback_sendResult_Results capnp.Struct

// Callback_sendResult_Results_TypeID is the unique identifier for the type Callback_sendResult_Results.
const Callback_sendResult_Results_TypeID = 0xbc40e8a99586a665

func NewCallback_sendResult_Results(s *capnp.Segment) (Callback_sendResult_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendResult_Results(st), err
}

func NewRootCallback_sendResult_Results(s *capnp.Segment) (Callback_sendResult_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_sendResult_Results(st), err
}

func ReadRootCallback_sendResult_Results(msg *capnp.Message) (Callback_sendResult_Results, error) {
	root, err := msg.Root()
	return Callback_sendResult_Results(root.Struct()), err
}

func (s Callback_sendResult_Results) String() string {
	str, _ := text.Marshal(0xbc40e8a99586a665, capnp.Struct(s))
	return str
}

func (s Callback_sendResult_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_sendResult_Results) DecodeFromPtr(p capnp.Ptr) Callback_sendResult_Results {
	return Callback_sendResult_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_sendResult_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_sendResult_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_sendResult_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_sendResult_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Callback_sendResult_Results_List is a list of Callback_sendResult_Results.
type Callback_sendResult_Results_List = capnp.StructList[Callback_sendResult_Results]

// NewCallback_sendResult_Results creates a new list of Callback_sendResult_Results.
func NewCallback_sendResult_Results_List(s *capnp.Segment, sz int32) (Callback_sendResult_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Callback_sendResult_Results](l), err
}

// Callback_sendResult_Results_Future is a wrapper for a Callback_sendResult_Results promised by a client call.
type Callback_sendResult_Results_Future struct{ *capnp.Future }

func (f Callback_sendResult_Results_Future) Struct() (Callback_sendResult_Results, error) {
	p, err := f.Future.Ptr()
	return Callback_sendResult_Results(p.Struct()), err
}

type Callback_done_Params capnp.Struct

// Callback_done_Params_TypeID is the unique identifier for the type Callback_done_Params.
const Callback_done_Params_TypeID = 0xcdbc9fb380c2572b

func NewCallback_done_Params(s *capnp.Segment) (Callback_done_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_done_Params(st), err
}

func NewRootCallback_done_Params(s *capnp.Segment) (Callback_done_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_done_Params(st), err
}

func ReadRootCallback_done_Params(msg *capnp.Message) (Callback_done_Params, error) {
	root, err := msg.Root()
	return Callback_done_Params(root.Struct()), err
}

func (s Callback_done_Params) String() string {
	str, _ := text.Marshal(0xcdbc9fb380c2572b, capnp.Struct(s))
	return str
}

func (s Callback_done_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_done_Params) DecodeFromPtr(p capnp.Ptr) Callback_done_Params {
	return Callback_done_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_done_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_done_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_done_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_done_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Callback_done_Params_List is a list of Callback_done_Params.
type Callback_done_Params_List = capnp.StructList[Callback_done_Params]

// NewCallback_done_Params creates a new list of Callback_done_Params.
func NewCallback_done_Params_List(s *capnp.Segment, sz int32) (Callback_done_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Callback_done_Params](l), err
}

// Callback_done_Params_Future is a wrapper for a Callback_done_Params promised by a client call.
type Callback_done_Params_Future struct{ *capnp.Future }

func (f Callback_done_Params_Future) Struct() (Callback_done_Params, error) {
	p, err := f.Future.Ptr()
	return Callback_done_Params(p.Struct()), err
}

type Callback_done_Results capnp.Struct

// Callback_done_Results_TypeID is the unique identifier for the type Callback_done_Results.
const Callback_done_Results_TypeID = 0xaa964acaea262bc8

func NewCallback_done_Results(s *capnp.Segment) (Callback_done_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_done_Results(st), err
}

func NewRootCallback_done_Results(s *capnp.Segment) (Callback_done_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_done_Results(st), err
}

func ReadRootCallback_done_Results(msg *capnp.Message) (Callback_done_Results, error) {
	root, err := msg.Root()
	return Callback_done_Results(root.Struct()), err
}

func (s Callback_done_Results) String() string {
	str, _ := text.Marshal(0xaa964acaea262bc8, capnp.Struct(s))
	return str
}

func (s Callback_done_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Callback_done_Results) DecodeFromPtr(p capnp.Ptr) Callback_done_Results {
	return Callback_done_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Callback_done_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Callback_done_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Callback_done_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Callback_done_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Callback_done_Results_List is a list of Callback_done_Results.
type Callback_done_Results_List = capnp.StructList[Callback_done_Results]

// NewCallback_done_Results creates a new list of Callback_done_Results.
func NewCallback_done_Results_List(s *capnp.Segment, sz int32) (Callback_done_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Callback_done_Results](l), err
}

// Callback_done_Results_Future is a wrapper for a Callback_done_Results promised by a client call.
type Callback_done_Results_Future struct{ *capnp.Future }

func (f Callback_done_Results_Future) Struct() (Callback_done_Results, error) {
	p, err := f.Future.Ptr()
	return Callback_done_Results(p.Struct()), err
}

const schema_c4b468a2826bb79b = "x\xda\x9cU]h\x1cU\x14>\xe7\xde;\x9dF6" +
	"]\xae\x93E*\xa4\x8b\xba\x8a\xb5\xcd\xd24\xe4\xa1Q" +
	"\xc9\xe0\xb6\x9a\x94\x05\xf7\xa6\xa0\x18Z\xec4{ec" +
	"\xb7\xb3\xcbL~JAj\x0b\xa6 \xd6\xfa\xd2BQ" +
	"QJ+\xb4>(\xad\xe2K\x05\x09\x01C `@" +
	"\xc9\x83\xf8\xa0O&\x10\x10AP1\x8c\xdc;;\xbb" +
	"\x93M\x97,y\xdb=\xe7;\xe7\xfb\xce\xf7]v\x0f" +
	"<Ll\xd6\xdbye\x07\x10\x917v\x04\xec\xcd\x0b" +
	"{~\\:w\x05x\x8a\x06\x1f~s\xfa\xe2\x8d\xd2" +
	"Ws\x00h\xf5\xd0?\xadC\xd4\x04\xb0\xfa\xe9\xf7\xd6" +
	"\xd7\xeaS07{j\xf9\xdb\xb5\xee\xeb\x9b\xc0\x1f\xd3" +
	"U\xeb\xb6\x06\xdf\xa2\x97\xac\xbf4\xf8\xa1\xbfo.>" +
	"\xf2G\xf1\xd3fp\xdf/\xf4Q\xb4\xd64z\x85\xbe" +
	"d\xa5\x98B\x1f_\xbf\x9c\xc9]\xb7o\x02\xefF\x00" +
	"U\xea[\xa7#\x08,(\x0ctp\xe3\xc5\xa1[\xc0" +
	"\x9f@\x00\x03Uk\x85\xdeA@\xeb\x1f:\x08\x18\xcc" +
	"\xef{ju\xe1\xe8\xb5;\xc0\xf7D\xa3\xbb\xd9\xa8\x1a" +
	"\x9d\xf1\xaf\x06\xa9\x99\xcc\xe7a\xc7 \xaae\xb0\x8bj" +
	"\x94\xb3i\xc0 \x7f\xc8~\xef\xc6\x1b?\x7f\x19c}" +
	"\x8biV\xf9\xd9\xcc\xd5\xdb\xbf\xdb\xf7cK\xc7\xd9\xbb" +
	"\xaas\xed\xd7w\xfc\x0f\xee]\xf8.6\xf3ZHW" +
	"\x9a\xfcmy\xe1\x87\xe7\xe6c3G\xc2\x99}\xaf\xce" +
	"\xbe}\xef\x93\xfb\x8b\xb1N\x7f\xc8s\xf6\xd2\xfe\xbb\x1f" +
	"\x9d\\\\\x8a_\xf7\x18\xbb\xab$\xf62u\xdd\xf9\xff" +
	"\xcc\x7f/\xe7\x9f]\x0e\xe9\x0ce[\x9f`G\x15\xe0" +
	"\x04\xfb\x020x\xff\x95\x97\x7fJ\x9f\xad\xae\xc4\x8f\xec" +
	"0\xf4\x91)c\x1az\x02_\xfa\xfex\xc5}\x9d\xf8" +
	"\xd2\x9b\x92^v\xcc\xa9\xba\xd5\x81\x9cSN\x97O9" +
	"c\xa7\x0b\x88\"A\x0d\x80\xba]\x18\x1d\xc2\xc5(\x10" +
	">lb\x83\x05#c\xf8\xf3\xaa\xd7o\"\xa9_\x87" +
	"Q\x12|\xef3@x\xb7\x19\xf8\xd2-\x0eI\xa7\x08" +
	"Tz6\xea\xaf#\xd2\x9f\x04Z\x9e\xb01Y\xac\xb8" +
	"\xd2\xc6\x02b\x0b\x89\xc7\xa4\x9fTe\xa5p\xa7V\x18" +
	"\x99\x81Qp\xbcW1=\xa9\x14F/\x08\xa3\x80\xf8" +
	"\xee\x83@x\xa7\x99T\xb46\xa6\xc7\xca\x15\xbf\x89\x8f" +
	"6\xf3\xa9\xea1\xe9MQ\xe9)V\xa6Y\xa3\x17\x88" +
	"QX\x9c\xab\xdb;\xcc\xc0\x95\xd3z\x08h\xc5\xdd\xb8" +
	"\x99=hsVK\xc8\x14\x1c\xcf9\x83~\x1dk\xb4" +
	"R!\xbdl\xc4Pq3\x05'\xe99g|\xc1(" +
	"\x03`\x08\xc0;\x1f\x07\x10;)\x8a.\x82\xa6t\xa7" +
	"0\x01\x04\x13\xd0JE\xce)\xeb\xc4\xb3\xca\xf8\x8c\x0a" +
	"\xa2L'Z\xc9\xa8\x83\xa3\x0c\xa5\x17\x0a\xf7\x15e\xa4" +
	"`\xefA\x00\x91\xa1(\x0e\x10\xe4\x88]\xa8\x8a=\x03" +
	"\x00\xe2i\x8a\xe20\xc1\xb47\xe9\x0e\x17#a\x83%" +
	"\xbd\x08w\x01\x16(\xea\xea.\xd8\xca4% T;" +
	"\x81m\xa9\x0d\xb1\xb5\x11\x1f\xa0\xadP\xb6a\xc7V\x04" +
	"\x1b\xfd\xdef\xea#2\xadY\xe2\xb1\xbf\xd0\x88\xfd|" +
	"m\x1d\xf2\xc6\xaf3 \xf2\xf6\\\xad\x05\x0a\"Q_" +
	"~D%jS\x14\xf9X\xa2\xc3*\xd1\xc3\x14\xc5I" +
	"\x82\x9c\x90.$\x00\xfc\xc49\x00q\x9c\xa2(m\x8a" +
	"\xb9\xaa\xf76\xc7\xeci\xbfr\x0e\x0c\x86\xbe o\xfc" +
	"\xfd4i\xde:\xddv\xdf\xe2(\x80\xd8OQ\x0c5" +
	"\x8b\xac\xc9\xc9\x8f\x03ue\x93\xd4\xff\x03\x00\x00\xff\xff" +
	"vD\x1c!"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c4b468a2826bb79b,
		Nodes: []uint64{
			0x8f7ad1d41e816a04,
			0x991dedbdd762c2c4,
			0xa064f017cda4f80a,
			0xa4409943248dfd5c,
			0xa548460511093a50,
			0xaa964acaea262bc8,
			0xab248615ff957386,
			0xb0db66a28c40394c,
			0xbc40e8a99586a665,
			0xc081b3907385e196,
			0xc83cd0cad7e27568,
			0xcdbc9fb380c2572b,
			0xd1cd609cb22c8778,
			0xd73b4c8dfa07fc7f,
			0xe970781fd54f568e,
		},
		Compressed: true,
	})
}
